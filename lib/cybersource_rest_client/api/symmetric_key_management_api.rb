=begin
#CyberSource Merged Spec

#All CyberSource API specs merged together. These are available at https://developer.cybersource.com/api/reference/api-reference.html

OpenAPI spec version: 0.0.1

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.2.3

=end

require 'uri'

module CyberSource
  class SymmetricKeyManagementApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default, config)
      @api_client = api_client
	  @api_client.set_configuration(config)
    end
    # Create Shared-Secret Keys
    # Create one or more Shared-Secret Keys 
    # @param create_shared_secret_keys_request 
    # @param [Hash] opts the optional parameters
    # @return [KmsV2KeysSymPost201Response]
    def create_v2_shared_secret_keys(create_shared_secret_keys_request, opts = {})
      data, status_code, headers = create_v2_shared_secret_keys_with_http_info(create_shared_secret_keys_request, opts)
      return data, status_code, headers
    end

    # Create Shared-Secret Keys
    # Create one or more Shared-Secret Keys 
    # @param create_shared_secret_keys_request 
    # @param [Hash] opts the optional parameters
    # @return [Array<(KmsV2KeysSymPost201Response, Fixnum, Hash)>] KmsV2KeysSymPost201Response data, response status code and response headers
    def create_v2_shared_secret_keys_with_http_info(create_shared_secret_keys_request, opts = {})
      
	  if @api_client.config.debugging
	  	begin
			raise
				@api_client.config.logger.debug 'Calling API: SymmetricKeyManagementApi.create_v2_shared_secret_keys ...'
			rescue
				puts 'Cannot write to log'
			end
      end
      # verify the required parameter 'create_shared_secret_keys_request' is set
      if @api_client.config.client_side_validation && create_shared_secret_keys_request.nil?
        fail ArgumentError, "Missing the required parameter 'create_shared_secret_keys_request' when calling SymmetricKeyManagementApi.create_v2_shared_secret_keys"
      end
      # resource path
      local_var_path = 'kms/v2/keys-sym'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/hal+json;charset=utf-8'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json;charset=utf-8'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(create_shared_secret_keys_request)
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'KmsV2KeysSymPost201Response')
      if @api_client.config.debugging
		begin
		raise
			@api_client.config.logger.debug "API called: SymmetricKeyManagementApi#create_v2_shared_secret_keys\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
		rescue
			puts 'Cannot write to log'
		end
	  end
      return data, status_code, headers
    end
    # Delete one or more Symmetric keys
    # 'Delete one or more Symmetric keys' 
    # @param delete_bulk_symmetric_keys_request 
    # @param [Hash] opts the optional parameters
    # @return [KmsV2KeysSymDeletesPost200Response]
    def delete_bulk_symmetric_keys(delete_bulk_symmetric_keys_request, opts = {})
      data, status_code, headers = delete_bulk_symmetric_keys_with_http_info(delete_bulk_symmetric_keys_request, opts)
      return data, status_code, headers
    end

    # Delete one or more Symmetric keys
    # &#39;Delete one or more Symmetric keys&#39; 
    # @param delete_bulk_symmetric_keys_request 
    # @param [Hash] opts the optional parameters
    # @return [Array<(KmsV2KeysSymDeletesPost200Response, Fixnum, Hash)>] KmsV2KeysSymDeletesPost200Response data, response status code and response headers
    def delete_bulk_symmetric_keys_with_http_info(delete_bulk_symmetric_keys_request, opts = {})
      
	  if @api_client.config.debugging
	  	begin
			raise
				@api_client.config.logger.debug 'Calling API: SymmetricKeyManagementApi.delete_bulk_symmetric_keys ...'
			rescue
				puts 'Cannot write to log'
			end
      end
      # verify the required parameter 'delete_bulk_symmetric_keys_request' is set
      if @api_client.config.client_side_validation && delete_bulk_symmetric_keys_request.nil?
        fail ArgumentError, "Missing the required parameter 'delete_bulk_symmetric_keys_request' when calling SymmetricKeyManagementApi.delete_bulk_symmetric_keys"
      end
      # resource path
      local_var_path = 'kms/v2/keys-sym/deletes'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/hal+json;charset=utf-8'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json;charset=utf-8'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(delete_bulk_symmetric_keys_request)
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'KmsV2KeysSymDeletesPost200Response')
      if @api_client.config.debugging
		begin
		raise
			@api_client.config.logger.debug "API called: SymmetricKeyManagementApi#delete_bulk_symmetric_keys\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
		rescue
			puts 'Cannot write to log'
		end
	  end
      return data, status_code, headers
    end
    # Retrieves shared secret key details
    # Retrieves keys details by providing the key id.
    # @param key_id Key ID. 
    # @param [Hash] opts the optional parameters
    # @return [KmsV2KeysSymGet200Response]
    def get_key_details(key_id, opts = {})
      data, status_code, headers = get_key_details_with_http_info(key_id, opts)
      return data, status_code, headers
    end

    # Retrieves shared secret key details
    # Retrieves keys details by providing the key id.
    # @param key_id Key ID. 
    # @param [Hash] opts the optional parameters
    # @return [Array<(KmsV2KeysSymGet200Response, Fixnum, Hash)>] KmsV2KeysSymGet200Response data, response status code and response headers
    def get_key_details_with_http_info(key_id, opts = {})
      
	  if @api_client.config.debugging
	  	begin
			raise
				@api_client.config.logger.debug 'Calling API: SymmetricKeyManagementApi.get_key_details ...'
			rescue
				puts 'Cannot write to log'
			end
      end
      # verify the required parameter 'key_id' is set
      if @api_client.config.client_side_validation && key_id.nil?
        fail ArgumentError, "Missing the required parameter 'key_id' when calling SymmetricKeyManagementApi.get_key_details"
      end
      # resource path
      local_var_path = 'kms/v2/keys-sym/{keyId}'.sub('{' + 'keyId' + '}', key_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/hal+json;charset=utf-8'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json;charset=utf-8'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'KmsV2KeysSymGet200Response')
      if @api_client.config.debugging
		begin
		raise
			@api_client.config.logger.debug "API called: SymmetricKeyManagementApi#get_key_details\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
		rescue
			puts 'Cannot write to log'
		end
	  end
      return data, status_code, headers
    end
  end
end
