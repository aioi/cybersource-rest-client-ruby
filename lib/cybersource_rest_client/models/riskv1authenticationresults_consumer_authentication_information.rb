=begin
#CyberSource Merged Spec

#All CyberSource API specs merged together. These are available at https://developer.cybersource.com/api/reference/api-reference.html

OpenAPI spec version: 0.0.1

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.2.3

=end

require 'date'

module CyberSource
  class Riskv1authenticationresultsConsumerAuthenticationInformation
    # Payer authentication transaction identifier passed to link the check enrollment and validate authentication messages. **Note**: Required for Standard integration for enroll service. Required for Hybrid integration for validate service. 
    attr_accessor :authentication_transaction_id

    # Indicates the type of authentication that will be used to challenge the card holder.  Possible Values:  01 - Static  02 - Dynamic  03 - OOB (Out of Band)  04 - Decoupled **NOTE**:  EMV 3-D Secure version 2.1.0 supports values 01-03.  Version 2.2.0 supports values 01-04.  Decoupled authentication is not supported at this time. 
    attr_accessor :authentication_type

    # This field describes the type of 3DS transaction flow that took place.  It can be one of three possible flows; CH - Challenge FR - Frictionless FD - Frictionless with delegation, (challenge not generated by the issuer but by the scheme on behalf of the issuer). 
    attr_accessor :effective_authentication_type

    # A JWT returned by 3DS provider once the authentication is complete, required in cruise hybrid integration method when using CyberSource generated access token. 
    attr_accessor :response_access_token

    # Provides additional information as to why the PAResStatus has a specific value. 
    attr_accessor :signed_pares_status_reason

    # Payer authentication result (PARes) message returned by the card-issuing bank. If you need to show proof of enrollment checking, you may need to decrypt and parse the string for the information required by the payment card company. For more information, see \"Storing Payer Authentication Data,\" page 160. Important The value is in base64. You must remove all carriage returns and line feeds before adding the PARes to the request. 
    attr_accessor :signed_pares

    # Enables the communication of trusted beneficiary/whitelist status between the ACS, the DS and the 3DS Requestor.  Possible Values:  Y - 3DS Requestor is whitelisted by cardholder  N - 3DS Requestor is not whitelisted by cardholder 
    attr_accessor :white_list_status

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'authentication_transaction_id' => :'authenticationTransactionId',
        :'authentication_type' => :'authenticationType',
        :'effective_authentication_type' => :'effectiveAuthenticationType',
        :'response_access_token' => :'responseAccessToken',
        :'signed_pares_status_reason' => :'signedParesStatusReason',
        :'signed_pares' => :'signedPares',
        :'white_list_status' => :'whiteListStatus'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'authentication_transaction_id' => :'String',
        :'authentication_type' => :'String',
        :'effective_authentication_type' => :'String',
        :'response_access_token' => :'String',
        :'signed_pares_status_reason' => :'String',
        :'signed_pares' => :'String',
        :'white_list_status' => :'String'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      if attributes.has_key?(:'authenticationTransactionId')
        self.authentication_transaction_id = attributes[:'authenticationTransactionId']
      end

      if attributes.has_key?(:'authenticationType')
        self.authentication_type = attributes[:'authenticationType']
      end

      if attributes.has_key?(:'effectiveAuthenticationType')
        self.effective_authentication_type = attributes[:'effectiveAuthenticationType']
      end

      if attributes.has_key?(:'responseAccessToken')
        self.response_access_token = attributes[:'responseAccessToken']
      end

      if attributes.has_key?(:'signedParesStatusReason')
        self.signed_pares_status_reason = attributes[:'signedParesStatusReason']
      end

      if attributes.has_key?(:'signedPares')
        self.signed_pares = attributes[:'signedPares']
      end

      if attributes.has_key?(:'whiteListStatus')
        self.white_list_status = attributes[:'whiteListStatus']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if !@authentication_transaction_id.nil? && @authentication_transaction_id.to_s.length > 20
        invalid_properties.push('invalid value for "authentication_transaction_id", the character length must be smaller than or equal to 20.')
      end

      if !@authentication_type.nil? && @authentication_type.to_s.length > 2
        invalid_properties.push('invalid value for "authentication_type", the character length must be smaller than or equal to 2.')
      end

      if !@effective_authentication_type.nil? && @effective_authentication_type.to_s.length > 2
        invalid_properties.push('invalid value for "effective_authentication_type", the character length must be smaller than or equal to 2.')
      end

      if !@response_access_token.nil? && @response_access_token.to_s.length > 2048
        invalid_properties.push('invalid value for "response_access_token", the character length must be smaller than or equal to 2048.')
      end

      if !@signed_pares_status_reason.nil? && @signed_pares_status_reason.to_s.length > 2
        invalid_properties.push('invalid value for "signed_pares_status_reason", the character length must be smaller than or equal to 2.')
      end

      if @signed_pares.nil?
        invalid_properties.push('invalid value for "signed_pares", signed_pares cannot be nil.')
      end

      if !@white_list_status.nil? && @white_list_status.to_s.length > 1
        invalid_properties.push('invalid value for "white_list_status", the character length must be smaller than or equal to 1.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if !@authentication_transaction_id.nil? && @authentication_transaction_id.to_s.length > 20
      return false if !@authentication_type.nil? && @authentication_type.to_s.length > 2
      return false if !@effective_authentication_type.nil? && @effective_authentication_type.to_s.length > 2
      return false if !@response_access_token.nil? && @response_access_token.to_s.length > 2048
      return false if !@signed_pares_status_reason.nil? && @signed_pares_status_reason.to_s.length > 2
      return false if @signed_pares.nil?
      return false if !@white_list_status.nil? && @white_list_status.to_s.length > 1
      true
    end

    # Custom attribute writer method with validation
    # @param [Object] authentication_transaction_id Value to be assigned
    def authentication_transaction_id=(authentication_transaction_id)
      if !authentication_transaction_id.nil? && authentication_transaction_id.to_s.length > 20
        fail ArgumentError, 'invalid value for "authentication_transaction_id", the character length must be smaller than or equal to 20.'
      end

      @authentication_transaction_id = authentication_transaction_id
    end

    # Custom attribute writer method with validation
    # @param [Object] authentication_type Value to be assigned
    def authentication_type=(authentication_type)
      if !authentication_type.nil? && authentication_type.to_s.length > 2
        fail ArgumentError, 'invalid value for "authentication_type", the character length must be smaller than or equal to 2.'
      end

      @authentication_type = authentication_type
    end

    # Custom attribute writer method with validation
    # @param [Object] effective_authentication_type Value to be assigned
    def effective_authentication_type=(effective_authentication_type)
      if !effective_authentication_type.nil? && effective_authentication_type.to_s.length > 2
        fail ArgumentError, 'invalid value for "effective_authentication_type", the character length must be smaller than or equal to 2.'
      end

      @effective_authentication_type = effective_authentication_type
    end

    # Custom attribute writer method with validation
    # @param [Object] response_access_token Value to be assigned
    def response_access_token=(response_access_token)
      if !response_access_token.nil? && response_access_token.to_s.length > 2048
        fail ArgumentError, 'invalid value for "response_access_token", the character length must be smaller than or equal to 2048.'
      end

      @response_access_token = response_access_token
    end

    # Custom attribute writer method with validation
    # @param [Object] signed_pares_status_reason Value to be assigned
    def signed_pares_status_reason=(signed_pares_status_reason)
      if !signed_pares_status_reason.nil? && signed_pares_status_reason.to_s.length > 2
        fail ArgumentError, 'invalid value for "signed_pares_status_reason", the character length must be smaller than or equal to 2.'
      end

      @signed_pares_status_reason = signed_pares_status_reason
    end

    # Custom attribute writer method with validation
    # @param [Object] white_list_status Value to be assigned
    def white_list_status=(white_list_status)
      if !white_list_status.nil? && white_list_status.to_s.length > 1
        fail ArgumentError, 'invalid value for "white_list_status", the character length must be smaller than or equal to 1.'
      end

      @white_list_status = white_list_status
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          authentication_transaction_id == o.authentication_transaction_id &&
          authentication_type == o.authentication_type &&
          effective_authentication_type == o.effective_authentication_type &&
          response_access_token == o.response_access_token &&
          signed_pares_status_reason == o.signed_pares_status_reason &&
          signed_pares == o.signed_pares &&
          white_list_status == o.white_list_status
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [authentication_transaction_id, authentication_type, effective_authentication_type, response_access_token, signed_pares_status_reason, signed_pares, white_list_status].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = CyberSource.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
