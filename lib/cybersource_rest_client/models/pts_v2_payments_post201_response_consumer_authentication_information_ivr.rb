=begin
#CyberSource Merged Spec

#All CyberSource API specs merged together. These are available at https://developer.cybersource.com/api/reference/api-reference.html

OpenAPI spec version: 0.0.1

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.2.3

=end

require 'date'

module CyberSource
  class PtsV2PaymentsPost201ResponseConsumerAuthenticationInformationIvr
    # Flag to indicate if a valid IVR transaction was detected. 
    attr_accessor :enabled_message

    # Encryption key to be used in the event the ACS requires encryption of the credential field. 
    attr_accessor :encryption_key

    # Flag to indicate if the ACS requires the credential to be encrypted. 
    attr_accessor :encryption_mandatory

    # An indicator from the ACS to inform the type of encryption that should be used in the event the ACS requires encryption of the credential field. 
    attr_accessor :encryption_type

    # An ACS Provided label that can be presented to the Consumer. Recommended use with an application. 
    attr_accessor :label

    # An ACS provided string that can be presented to the Consumer. Recommended use with an application. 
    attr_accessor :prompt

    # An ACS provided message that can provide additional information or details. 
    attr_accessor :status_message

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'enabled_message' => :'enabledMessage',
        :'encryption_key' => :'encryptionKey',
        :'encryption_mandatory' => :'encryptionMandatory',
        :'encryption_type' => :'encryptionType',
        :'label' => :'label',
        :'prompt' => :'prompt',
        :'status_message' => :'statusMessage'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'enabled_message' => :'BOOLEAN',
        :'encryption_key' => :'String',
        :'encryption_mandatory' => :'BOOLEAN',
        :'encryption_type' => :'String',
        :'label' => :'String',
        :'prompt' => :'String',
        :'status_message' => :'String'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      if attributes.has_key?(:'enabledMessage')
        self.enabled_message = attributes[:'enabledMessage']
      end

      if attributes.has_key?(:'encryptionKey')
        self.encryption_key = attributes[:'encryptionKey']
      end

      if attributes.has_key?(:'encryptionMandatory')
        self.encryption_mandatory = attributes[:'encryptionMandatory']
      end

      if attributes.has_key?(:'encryptionType')
        self.encryption_type = attributes[:'encryptionType']
      end

      if attributes.has_key?(:'label')
        self.label = attributes[:'label']
      end

      if attributes.has_key?(:'prompt')
        self.prompt = attributes[:'prompt']
      end

      if attributes.has_key?(:'statusMessage')
        self.status_message = attributes[:'statusMessage']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if !@encryption_key.nil? && @encryption_key.to_s.length > 16
        invalid_properties.push('invalid value for "encryption_key", the character length must be smaller than or equal to 16.')
      end

      if !@encryption_type.nil? && @encryption_type.to_s.length > 20
        invalid_properties.push('invalid value for "encryption_type", the character length must be smaller than or equal to 20.')
      end

      if !@label.nil? && @label.to_s.length > 20
        invalid_properties.push('invalid value for "label", the character length must be smaller than or equal to 20.')
      end

      if !@prompt.nil? && @prompt.to_s.length > 80
        invalid_properties.push('invalid value for "prompt", the character length must be smaller than or equal to 80.')
      end

      if !@status_message.nil? && @status_message.to_s.length > 80
        invalid_properties.push('invalid value for "status_message", the character length must be smaller than or equal to 80.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if !@encryption_key.nil? && @encryption_key.to_s.length > 16
      return false if !@encryption_type.nil? && @encryption_type.to_s.length > 20
      return false if !@label.nil? && @label.to_s.length > 20
      return false if !@prompt.nil? && @prompt.to_s.length > 80
      return false if !@status_message.nil? && @status_message.to_s.length > 80
      true
    end

    # Custom attribute writer method with validation
    # @param [Object] encryption_key Value to be assigned
    def encryption_key=(encryption_key)
      if !encryption_key.nil? && encryption_key.to_s.length > 16
        fail ArgumentError, 'invalid value for "encryption_key", the character length must be smaller than or equal to 16.'
      end

      @encryption_key = encryption_key
    end

    # Custom attribute writer method with validation
    # @param [Object] encryption_type Value to be assigned
    def encryption_type=(encryption_type)
      if !encryption_type.nil? && encryption_type.to_s.length > 20
        fail ArgumentError, 'invalid value for "encryption_type", the character length must be smaller than or equal to 20.'
      end

      @encryption_type = encryption_type
    end

    # Custom attribute writer method with validation
    # @param [Object] label Value to be assigned
    def label=(label)
      if !label.nil? && label.to_s.length > 20
        fail ArgumentError, 'invalid value for "label", the character length must be smaller than or equal to 20.'
      end

      @label = label
    end

    # Custom attribute writer method with validation
    # @param [Object] prompt Value to be assigned
    def prompt=(prompt)
      if !prompt.nil? && prompt.to_s.length > 80
        fail ArgumentError, 'invalid value for "prompt", the character length must be smaller than or equal to 80.'
      end

      @prompt = prompt
    end

    # Custom attribute writer method with validation
    # @param [Object] status_message Value to be assigned
    def status_message=(status_message)
      if !status_message.nil? && status_message.to_s.length > 80
        fail ArgumentError, 'invalid value for "status_message", the character length must be smaller than or equal to 80.'
      end

      @status_message = status_message
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          enabled_message == o.enabled_message &&
          encryption_key == o.encryption_key &&
          encryption_mandatory == o.encryption_mandatory &&
          encryption_type == o.encryption_type &&
          label == o.label &&
          prompt == o.prompt &&
          status_message == o.status_message
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [enabled_message, encryption_key, encryption_mandatory, encryption_type, label, prompt, status_message].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = CyberSource.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
