=begin
#CyberSource Merged Spec

#All CyberSource API specs merged together. These are available at https://developer.cybersource.com/api/reference/api-reference.html

OpenAPI spec version: 0.0.1

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.2.3

=end

require 'date'

module CyberSource
  class TssV2TransactionsGet200ResponseProcessingInformationJapanPaymentOptions
    # This value is a 2-digit code indicating the payment method. Use Payment Method Code value that applies to the tranasction. - 10 (One-time payment) - 21, 22, 23, 24  (Bonus(one-time)payment) - 61 (Installment payment) - 31, 32, 33, 34  (Integrated (Bonus + Installment)payment) - 80 (Revolving payment) 
    attr_accessor :payment_method

    # Unique Japan Credit Card Association (JCCA) terminal identifier.  The difference between this field and the `pointOfSaleInformation.terminalID` field is that you can define `pointOfSaleInformation.terminalID`, but `processingInformation.japanPaymentOptions.terminalId` is defined by the JCCA and is used only in Japan.  This field is supported only on CyberSource through VisaNet and JCN Gateway.  Optional field. 
    attr_accessor :terminal_id

    # Business name in Japanese characters. This field is supported only on JCN Gateway and for the Sumitomo Mitsui Card Co. acquirer on CyberSource through VisaNet. 
    attr_accessor :business_name

    # Business name in Katakana characters. This field is supported only on JCN Gateway and for the Sumitomo Mitsui Card Co. acquirer on CyberSource through VisaNet. 
    attr_accessor :business_name_katakana

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'payment_method' => :'paymentMethod',
        :'terminal_id' => :'terminalId',
        :'business_name' => :'businessName',
        :'business_name_katakana' => :'businessNameKatakana'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'payment_method' => :'String',
        :'terminal_id' => :'String',
        :'business_name' => :'String',
        :'business_name_katakana' => :'String'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      if attributes.has_key?(:'paymentMethod')
        self.payment_method = attributes[:'paymentMethod']
      end

      if attributes.has_key?(:'terminalId')
        self.terminal_id = attributes[:'terminalId']
      end

      if attributes.has_key?(:'businessName')
        self.business_name = attributes[:'businessName']
      end

      if attributes.has_key?(:'businessNameKatakana')
        self.business_name_katakana = attributes[:'businessNameKatakana']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if !@payment_method.nil? && @payment_method.to_s.length > 2
        invalid_properties.push('invalid value for "payment_method", the character length must be smaller than or equal to 2.')
      end

      if !@terminal_id.nil? && @terminal_id.to_s.length > 13
        invalid_properties.push('invalid value for "terminal_id", the character length must be smaller than or equal to 13.')
      end

      if !@business_name.nil? && @business_name.to_s.length > 25
        invalid_properties.push('invalid value for "business_name", the character length must be smaller than or equal to 25.')
      end

      if !@business_name_katakana.nil? && @business_name_katakana.to_s.length > 25
        invalid_properties.push('invalid value for "business_name_katakana", the character length must be smaller than or equal to 25.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if !@payment_method.nil? && @payment_method.to_s.length > 2
      return false if !@terminal_id.nil? && @terminal_id.to_s.length > 13
      return false if !@business_name.nil? && @business_name.to_s.length > 25
      return false if !@business_name_katakana.nil? && @business_name_katakana.to_s.length > 25
      true
    end

    # Custom attribute writer method with validation
    # @param [Object] payment_method Value to be assigned
    def payment_method=(payment_method)
      if !payment_method.nil? && payment_method.to_s.length > 2
        fail ArgumentError, 'invalid value for "payment_method", the character length must be smaller than or equal to 2.'
      end

      @payment_method = payment_method
    end

    # Custom attribute writer method with validation
    # @param [Object] terminal_id Value to be assigned
    def terminal_id=(terminal_id)
      if !terminal_id.nil? && terminal_id.to_s.length > 13
        fail ArgumentError, 'invalid value for "terminal_id", the character length must be smaller than or equal to 13.'
      end

      @terminal_id = terminal_id
    end

    # Custom attribute writer method with validation
    # @param [Object] business_name Value to be assigned
    def business_name=(business_name)
      if !business_name.nil? && business_name.to_s.length > 25
        fail ArgumentError, 'invalid value for "business_name", the character length must be smaller than or equal to 25.'
      end

      @business_name = business_name
    end

    # Custom attribute writer method with validation
    # @param [Object] business_name_katakana Value to be assigned
    def business_name_katakana=(business_name_katakana)
      if !business_name_katakana.nil? && business_name_katakana.to_s.length > 25
        fail ArgumentError, 'invalid value for "business_name_katakana", the character length must be smaller than or equal to 25.'
      end

      @business_name_katakana = business_name_katakana
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          payment_method == o.payment_method &&
          terminal_id == o.terminal_id &&
          business_name == o.business_name &&
          business_name_katakana == o.business_name_katakana
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [payment_method, terminal_id, business_name, business_name_katakana].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = CyberSource.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
