=begin
#CyberSource Merged Spec

#All CyberSource API specs merged together. These are available at https://developer.cybersource.com/api/reference/api-reference.html

OpenAPI spec version: 0.0.1

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.2.3

=end

require 'date'

module CyberSource
  class Riskv1decisionsTravelInformation
    # IATA Code for the actual final destination that the customer intends to travel to. It should be a destination on the completeRoute. 
    attr_accessor :actual_final_destination

    # Concatenation of individual travel legs in the format ORIG1-DEST1[:ORIG2-DEST2...:ORIGn-DESTn], for example, SFO-JFK:JFK-LHR:LHR-CDG. For airport codes, see the IATA Airline and Airport Code Search. Note In your request, send either the complete route or the individual legs (_leg#_orig and _leg#_dest). If you send all the fields, the value of _complete_route takes precedence over that of the _leg# fields. 
    attr_accessor :complete_route

    # Departure date and time of the first leg of the trip. Use one of the following formats:   - yyyy-MM-dd HH:mm z   - yyyy-MM-dd hh:mm a z   - yyyy-MM-dd hh:mma z   HH = hour in 24-hour format   hh = hour in 12-hour format   a = am or pm (case insensitive)   z = time zone of the departing flight, for example: If the   airline is based in city A, but the flight departs from city   B, z is the time zone of city B at the time of departure. Important For travel information, use GMT instead of UTC, or use the local time zone. Examples 2011-03-20 11:30 PM PDT 2011-03-20 11:30pm GMT 2011-03-20 11:30pm GMT-05:00 Eastern Standard Time: GMT-05:00 or EST Note When specifying an offset from GMT, the format must be exactly as specified in the example. Insert no spaces between the time zone and the offset. 
    attr_accessor :departure_time

    # Type of travel, for example one way or round trip.
    attr_accessor :journey_type

    attr_accessor :legs

    # Number of passengers for whom the ticket was issued. If you do not include this field in your request, CyberSource uses a default value of 1. Required for American Express SafeKey (U.S.) for travel-related requests. 
    attr_accessor :number_of_passengers

    attr_accessor :passengers

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'actual_final_destination' => :'actualFinalDestination',
        :'complete_route' => :'completeRoute',
        :'departure_time' => :'departureTime',
        :'journey_type' => :'journeyType',
        :'legs' => :'legs',
        :'number_of_passengers' => :'numberOfPassengers',
        :'passengers' => :'passengers'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'actual_final_destination' => :'String',
        :'complete_route' => :'String',
        :'departure_time' => :'String',
        :'journey_type' => :'String',
        :'legs' => :'Array<Riskv1decisionsTravelInformationLegs>',
        :'number_of_passengers' => :'Integer',
        :'passengers' => :'Array<Riskv1decisionsTravelInformationPassengers>'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      if attributes.has_key?(:'actualFinalDestination')
        self.actual_final_destination = attributes[:'actualFinalDestination']
      end

      if attributes.has_key?(:'completeRoute')
        self.complete_route = attributes[:'completeRoute']
      end

      if attributes.has_key?(:'departureTime')
        self.departure_time = attributes[:'departureTime']
      end

      if attributes.has_key?(:'journeyType')
        self.journey_type = attributes[:'journeyType']
      end

      if attributes.has_key?(:'legs')
        if (value = attributes[:'legs']).is_a?(Array)
          self.legs = value
        end
      end

      if attributes.has_key?(:'numberOfPassengers')
        self.number_of_passengers = attributes[:'numberOfPassengers']
      end

      if attributes.has_key?(:'passengers')
        if (value = attributes[:'passengers']).is_a?(Array)
          self.passengers = value
        end
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if !@actual_final_destination.nil? && @actual_final_destination.to_s.length > 3
        invalid_properties.push('invalid value for "actual_final_destination", the character length must be smaller than or equal to 3.')
      end

      if !@complete_route.nil? && @complete_route.to_s.length > 255
        invalid_properties.push('invalid value for "complete_route", the character length must be smaller than or equal to 255.')
      end

      if !@departure_time.nil? && @departure_time.to_s.length > 25
        invalid_properties.push('invalid value for "departure_time", the character length must be smaller than or equal to 25.')
      end

      if !@journey_type.nil? && @journey_type.to_s.length > 32
        invalid_properties.push('invalid value for "journey_type", the character length must be smaller than or equal to 32.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if !@actual_final_destination.nil? && @actual_final_destination.to_s.length > 3
      return false if !@complete_route.nil? && @complete_route.to_s.length > 255
      return false if !@departure_time.nil? && @departure_time.to_s.length > 25
      return false if !@journey_type.nil? && @journey_type.to_s.length > 32
      true
    end

    # Custom attribute writer method with validation
    # @param [Object] actual_final_destination Value to be assigned
    def actual_final_destination=(actual_final_destination)
      if !actual_final_destination.nil? && actual_final_destination.to_s.length > 3
        fail ArgumentError, 'invalid value for "actual_final_destination", the character length must be smaller than or equal to 3.'
      end

      @actual_final_destination = actual_final_destination
    end

    # Custom attribute writer method with validation
    # @param [Object] complete_route Value to be assigned
    def complete_route=(complete_route)
      if !complete_route.nil? && complete_route.to_s.length > 255
        fail ArgumentError, 'invalid value for "complete_route", the character length must be smaller than or equal to 255.'
      end

      @complete_route = complete_route
    end

    # Custom attribute writer method with validation
    # @param [Object] departure_time Value to be assigned
    def departure_time=(departure_time)
      if !departure_time.nil? && departure_time.to_s.length > 25
        fail ArgumentError, 'invalid value for "departure_time", the character length must be smaller than or equal to 25.'
      end

      @departure_time = departure_time
    end

    # Custom attribute writer method with validation
    # @param [Object] journey_type Value to be assigned
    def journey_type=(journey_type)
      if !journey_type.nil? && journey_type.to_s.length > 32
        fail ArgumentError, 'invalid value for "journey_type", the character length must be smaller than or equal to 32.'
      end

      @journey_type = journey_type
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          actual_final_destination == o.actual_final_destination &&
          complete_route == o.complete_route &&
          departure_time == o.departure_time &&
          journey_type == o.journey_type &&
          legs == o.legs &&
          number_of_passengers == o.number_of_passengers &&
          passengers == o.passengers
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [actual_final_destination, complete_route, departure_time, journey_type, legs, number_of_passengers, passengers].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = CyberSource.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
