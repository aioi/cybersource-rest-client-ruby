=begin
#CyberSource Merged Spec

#All CyberSource API specs merged together. These are available at https://developer.cybersource.com/api/reference/api-reference.html

OpenAPI spec version: 0.0.1

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.2.3

=end

require 'date'

module CyberSource
  class Ptsv2paymentsTravelInformationAutoRental
    # No Show Indicator provides an indicator noting that the individual did not show up after making a reservation for a vehicle. Possible values: - true - false 
    attr_accessor :no_show_indicator

    # Name of the individual making the rental agreement.  Valid data lengths by card:  |Card Specific Validation|VISA|MasterCard|Discover|AMEX| |--- |--- |--- |--- | | Filed Length| 40| 40| 29| 26| | Field Type| AN| ANS| AN| AN| | M/O/C| O| M| M| M| 
    attr_accessor :customer_name

    # Classification of the rented auto.  **NOTE** For VISA, this is a 2-byte optional code.  Valid values for American Express & MasterCard:  |American Express |MasterCard |Description| |--- |--- |--- | | 0001| 0001| Mini| | 0002| 0002| Subcompact| | 0003| 0003| Economy| | 0004| 0004| Compact| | 0005| 0005| Midsize| | 0006| 0006| Intermediate| | 0007| 0007| Standard| | 0008| 0008| Fulll size| | 0009| 0009| Luxury| | 0010| 0010| Premium| | 0011| 0011| Minivan| | 0012| 0012| 12-passenger van| | 0013| 0013| Moving van| | 0014| 0014| 15-passenger van| | 0015| 0015| Cargo van| | 0016| 0016| 12-foot truck| | 0017| 0017| 20-foot truck| | 0018| 0018| 24-foot truck| | 0019| 0019| 26-foot truck| | 0020| 0020| Moped| | 0021| 0021| Stretch| | 0022| 0022| Regular| | 0023| 0023| Unique| | 0024| 0024| Exotic| | 0025| 0025| Small/medium truck| | 0026| 0026| Large truck| | 0027| 0027| Small SUV| | 0028| 0028| Medium SUV| | 0029| 0029| Large SUV| | 0030| 0030| Exotic SUV| | 9999| 9999| Miscellaneous|  Additional Values allowed **only** for `American Express`:  |American Express|MasterCard|Description| |--- |--- |--- | | 0031| NA| Four Wheel Drive| | 0032| NA| Special| | 0099| NA| Taxi| 
    attr_accessor :vehicle_class

    # Total number of miles driven by the customer. This field is supported only for MasterCard and American Express. 
    attr_accessor :distance_travelled

    # Miles/Kilometers Indicator shows whether the “miles” fields are expressed in miles or kilometers.  Allowed values: - `K` - Kilometers - `M` - Miles 
    attr_accessor :distance_unit

    # Date/time the auto was returned to the rental agency. Format: ``yyyy-MM-dd HH-mm-ss z`` This field is supported for Visa, MasterCard, and American Express. 
    attr_accessor :return_date_time

    # Date/time the auto was picked up from the rental agency. Format: `yyyy-MM-dd HH-mm-ss z` This field is supported for Visa, MasterCard, and American Express. 
    attr_accessor :rental_date_time

    # Maximum number of free miles or kilometers allowed to a customer for the duration of the auto rental agreement. This field is supported only for MasterCard and American Express. 
    attr_accessor :max_free_distance

    # Used for MC and Discover  Valid values: - `true` - Yes (insurance was purchased) - `false` - No (insurance was not purchased) 
    attr_accessor :insurance_indicator

    # Used to identify special circumstances applicable to the Card Transaction or Cardholder, such as \"renter” or ”show”.  This code is `2 digit` value agreed by Merchant and processor. 
    attr_accessor :program_code

    attr_accessor :return_address

    attr_accessor :rental_address

    # Auto rental agency’s agreement (invoice) number provided to the customer. It is used to trace any inquiries about transactions. This field is supported for Visa, MasterCard, and American Express. This Merchant-defined value, which may be composed of any combination of characters and/or numerals, may become part of the descriptive bill on the Cardmember's statement. 
    attr_accessor :agreement_number

    # Odometer reading at time of vehicle rental. 
    attr_accessor :odometer_reading

    # This field contains a unique identifier assigned by the company to the vehicle. 
    attr_accessor :vehicle_identification_number

    # Corporate Identifier provides the unique identifier of the corporation or entity renting the vehicle:  |Card Specific Validation|VISA|MasterCard|Discover|AMEX| |--- |--- |--- |--- | | Filed Length| NA| 12| NA| NA| | Field Type| NA| AN| NA| NA| | M/O/C| NA| O| NA| NA| 
    attr_accessor :company_id

    # The number of additional drivers included on the rental agreement not including the individual who signed the rental agreement. 
    attr_accessor :number_of_additional_drivers

    # Age of the driver renting the vehicle. 
    attr_accessor :driver_age

    # Program code used to identify special circumstances, such as “frequent renter” or “no show” status for the renter. Possible values: - `0`: not applicable (default) - `1`: frequent renter - `2`: no show  For authorizations, this field is supported only for Visa.  For captures, this field is supported for Visa, MasterCard, and American Express.  Code for special programs applicable to the Card Transaction or the Cardholder. 
    attr_accessor :special_program_code

    # Make of the vehicle being rented (e.g., Chevrolet or Ford). 
    attr_accessor :vehicle_make

    # Model of the vehicle being rented (e.g., Cavalier or Focus). 
    attr_accessor :vehicle_model

    # Indicates the time period for which the vehicle rental rate applies (e.g., daily, weekly or monthly). Daily, Weekly and Monthly are valid values. 
    attr_accessor :time_period

    # Commodity code or International description code used to classify the item. Contact your acquirer for a list of codes. 
    attr_accessor :commodity_code

    # Customer service telephone number that is used to resolve questions or disputes. Include the area code, exchange, and number. This field is supported only for MasterCard and American Express. 
    attr_accessor :customer_service_phone_number

    attr_accessor :tax_details

    # Insurance charges. Field is conditional and can include decimal point. 
    attr_accessor :insurance_amount

    # Extra charges incurred for a one-way rental agreement for the auto. This field is supported only for Visa. 
    attr_accessor :one_way_drop_off_amount

    # For **MasterCard** and **Discover**: Adjusted amount indicator code that indicates any miscellaneous charges incurred after the auto was returned. Possible values: - `A` - Drop-off charges - `B` - Delivery charges - `C` - Parking expenses - `D` - Extra hours - `E` - Violations - `X` - More than one of the above charges  For **American Express**: Audit indicator code that indicates any adjustment for mileage, fuel, auto damage, etc. made to a rental agreement and whether the cardholder was notified.  Possible value for the authorization service: - `A` (default): adjustment amount greater than 0 (zero)  Possible values for the capture service: - `X` - Multiple adjustments - `Y` - One adjustment only; Cardmember notified - `Z` - One adjustment only; Cardmember not notified. This value is used as the default if the request does not include this field and includes an adjustment amount greater than 0 (zero). This is an optional field. 
    attr_accessor :adjusted_amount_indicator

    # Adjusted Amount indicates whether any miscellaneous charges were incurred after the vehicle was returned.  For authorizations, this field is supported only for American Express.  For captures, this field is supported only for MasterCard and American Express. **NOTE** For American Express, this field is required if the `travelInformation.autoRental.adjustedAmountIndicator` field is included in the request and has a value; otherwise, this field is optional.  For all other card types, this field is ignored. 
    attr_accessor :adjusted_amount

    # Extra gasoline charges that extend beyond the basic rental agreement. This field is supported only for Visa. 
    attr_accessor :fuel_charges

    # Weekly Rental Amount provides the amount charged for a seven-day rental period. Field - Time Period needs to be populated with Weekly if this field is present 
    attr_accessor :weekly_rental_rate

    # Daily auto rental rate charged. This field is supported only for MasterCard and American Express.  Field - Time Period needs to be populated with Daily if this field is present 
    attr_accessor :daily_rental_rate

    # Rate charged for each mile. This field is supported only for MasterCard and American Express. 
    attr_accessor :rate_per_mile

    # Regular Mileage Charge provides the amount charged for regular miles traveled during vehicle rental. Two decimal places 
    attr_accessor :mileage_charge

    # Extra mileage charges that extend beyond the basic rental agreement. This field is supported only for Visa. 
    attr_accessor :extra_mileage_charge

    # Extra charges related to a late return of the rented auto. This field is supported only for Visa. 
    attr_accessor :late_fee_amount

    # (Towing Charges) provides the amount charged to tow the rental vehicle. 
    attr_accessor :towing_charge

    # (Extra Charges) provides the extra charges associated with the vehicle rental. 
    attr_accessor :extra_charge

    # Amount charged for renting a Global Positioning Service (GPS). 
    attr_accessor :gps_charge

    # Additional charges incurred for phone usage included on the total bill. 
    attr_accessor :phone_charge

    # Extra charges incurred due to a parking violation for the auto. This field is supported only for Visa. 
    attr_accessor :parking_violation_charge

    # Total amount charged for all other miscellaneous charges not previously defined. 
    attr_accessor :other_charges

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'no_show_indicator' => :'noShowIndicator',
        :'customer_name' => :'customerName',
        :'vehicle_class' => :'vehicleClass',
        :'distance_travelled' => :'distanceTravelled',
        :'distance_unit' => :'distanceUnit',
        :'return_date_time' => :'returnDateTime',
        :'rental_date_time' => :'rentalDateTime',
        :'max_free_distance' => :'maxFreeDistance',
        :'insurance_indicator' => :'insuranceIndicator',
        :'program_code' => :'programCode',
        :'return_address' => :'returnAddress',
        :'rental_address' => :'rentalAddress',
        :'agreement_number' => :'agreementNumber',
        :'odometer_reading' => :'odometerReading',
        :'vehicle_identification_number' => :'vehicleIdentificationNumber',
        :'company_id' => :'companyId',
        :'number_of_additional_drivers' => :'numberOfAdditionalDrivers',
        :'driver_age' => :'driverAge',
        :'special_program_code' => :'specialProgramCode',
        :'vehicle_make' => :'vehicleMake',
        :'vehicle_model' => :'vehicleModel',
        :'time_period' => :'timePeriod',
        :'commodity_code' => :'commodityCode',
        :'customer_service_phone_number' => :'customerServicePhoneNumber',
        :'tax_details' => :'taxDetails',
        :'insurance_amount' => :'insuranceAmount',
        :'one_way_drop_off_amount' => :'oneWayDropOffAmount',
        :'adjusted_amount_indicator' => :'adjustedAmountIndicator',
        :'adjusted_amount' => :'adjustedAmount',
        :'fuel_charges' => :'fuelCharges',
        :'weekly_rental_rate' => :'weeklyRentalRate',
        :'daily_rental_rate' => :'dailyRentalRate',
        :'rate_per_mile' => :'ratePerMile',
        :'mileage_charge' => :'mileageCharge',
        :'extra_mileage_charge' => :'extraMileageCharge',
        :'late_fee_amount' => :'lateFeeAmount',
        :'towing_charge' => :'towingCharge',
        :'extra_charge' => :'extraCharge',
        :'gps_charge' => :'gpsCharge',
        :'phone_charge' => :'phoneCharge',
        :'parking_violation_charge' => :'parkingViolationCharge',
        :'other_charges' => :'otherCharges'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'no_show_indicator' => :'BOOLEAN',
        :'customer_name' => :'String',
        :'vehicle_class' => :'String',
        :'distance_travelled' => :'String',
        :'distance_unit' => :'String',
        :'return_date_time' => :'String',
        :'rental_date_time' => :'String',
        :'max_free_distance' => :'String',
        :'insurance_indicator' => :'BOOLEAN',
        :'program_code' => :'String',
        :'return_address' => :'Ptsv2paymentsTravelInformationAutoRentalReturnAddress',
        :'rental_address' => :'Ptsv2paymentsTravelInformationAutoRentalRentalAddress',
        :'agreement_number' => :'String',
        :'odometer_reading' => :'String',
        :'vehicle_identification_number' => :'String',
        :'company_id' => :'String',
        :'number_of_additional_drivers' => :'String',
        :'driver_age' => :'String',
        :'special_program_code' => :'String',
        :'vehicle_make' => :'String',
        :'vehicle_model' => :'String',
        :'time_period' => :'String',
        :'commodity_code' => :'String',
        :'customer_service_phone_number' => :'String',
        :'tax_details' => :'Ptsv2paymentsTravelInformationAutoRentalTaxDetails',
        :'insurance_amount' => :'String',
        :'one_way_drop_off_amount' => :'String',
        :'adjusted_amount_indicator' => :'String',
        :'adjusted_amount' => :'String',
        :'fuel_charges' => :'String',
        :'weekly_rental_rate' => :'String',
        :'daily_rental_rate' => :'String',
        :'rate_per_mile' => :'String',
        :'mileage_charge' => :'String',
        :'extra_mileage_charge' => :'String',
        :'late_fee_amount' => :'String',
        :'towing_charge' => :'String',
        :'extra_charge' => :'String',
        :'gps_charge' => :'String',
        :'phone_charge' => :'String',
        :'parking_violation_charge' => :'String',
        :'other_charges' => :'String'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      if attributes.has_key?(:'noShowIndicator')
        self.no_show_indicator = attributes[:'noShowIndicator']
      end

      if attributes.has_key?(:'customerName')
        self.customer_name = attributes[:'customerName']
      end

      if attributes.has_key?(:'vehicleClass')
        self.vehicle_class = attributes[:'vehicleClass']
      end

      if attributes.has_key?(:'distanceTravelled')
        self.distance_travelled = attributes[:'distanceTravelled']
      end

      if attributes.has_key?(:'distanceUnit')
        self.distance_unit = attributes[:'distanceUnit']
      end

      if attributes.has_key?(:'returnDateTime')
        self.return_date_time = attributes[:'returnDateTime']
      end

      if attributes.has_key?(:'rentalDateTime')
        self.rental_date_time = attributes[:'rentalDateTime']
      end

      if attributes.has_key?(:'maxFreeDistance')
        self.max_free_distance = attributes[:'maxFreeDistance']
      end

      if attributes.has_key?(:'insuranceIndicator')
        self.insurance_indicator = attributes[:'insuranceIndicator']
      end

      if attributes.has_key?(:'programCode')
        self.program_code = attributes[:'programCode']
      end

      if attributes.has_key?(:'returnAddress')
        self.return_address = attributes[:'returnAddress']
      end

      if attributes.has_key?(:'rentalAddress')
        self.rental_address = attributes[:'rentalAddress']
      end

      if attributes.has_key?(:'agreementNumber')
        self.agreement_number = attributes[:'agreementNumber']
      end

      if attributes.has_key?(:'odometerReading')
        self.odometer_reading = attributes[:'odometerReading']
      end

      if attributes.has_key?(:'vehicleIdentificationNumber')
        self.vehicle_identification_number = attributes[:'vehicleIdentificationNumber']
      end

      if attributes.has_key?(:'companyId')
        self.company_id = attributes[:'companyId']
      end

      if attributes.has_key?(:'numberOfAdditionalDrivers')
        self.number_of_additional_drivers = attributes[:'numberOfAdditionalDrivers']
      end

      if attributes.has_key?(:'driverAge')
        self.driver_age = attributes[:'driverAge']
      end

      if attributes.has_key?(:'specialProgramCode')
        self.special_program_code = attributes[:'specialProgramCode']
      end

      if attributes.has_key?(:'vehicleMake')
        self.vehicle_make = attributes[:'vehicleMake']
      end

      if attributes.has_key?(:'vehicleModel')
        self.vehicle_model = attributes[:'vehicleModel']
      end

      if attributes.has_key?(:'timePeriod')
        self.time_period = attributes[:'timePeriod']
      end

      if attributes.has_key?(:'commodityCode')
        self.commodity_code = attributes[:'commodityCode']
      end

      if attributes.has_key?(:'customerServicePhoneNumber')
        self.customer_service_phone_number = attributes[:'customerServicePhoneNumber']
      end

      if attributes.has_key?(:'taxDetails')
        self.tax_details = attributes[:'taxDetails']
      end

      if attributes.has_key?(:'insuranceAmount')
        self.insurance_amount = attributes[:'insuranceAmount']
      end

      if attributes.has_key?(:'oneWayDropOffAmount')
        self.one_way_drop_off_amount = attributes[:'oneWayDropOffAmount']
      end

      if attributes.has_key?(:'adjustedAmountIndicator')
        self.adjusted_amount_indicator = attributes[:'adjustedAmountIndicator']
      end

      if attributes.has_key?(:'adjustedAmount')
        self.adjusted_amount = attributes[:'adjustedAmount']
      end

      if attributes.has_key?(:'fuelCharges')
        self.fuel_charges = attributes[:'fuelCharges']
      end

      if attributes.has_key?(:'weeklyRentalRate')
        self.weekly_rental_rate = attributes[:'weeklyRentalRate']
      end

      if attributes.has_key?(:'dailyRentalRate')
        self.daily_rental_rate = attributes[:'dailyRentalRate']
      end

      if attributes.has_key?(:'ratePerMile')
        self.rate_per_mile = attributes[:'ratePerMile']
      end

      if attributes.has_key?(:'mileageCharge')
        self.mileage_charge = attributes[:'mileageCharge']
      end

      if attributes.has_key?(:'extraMileageCharge')
        self.extra_mileage_charge = attributes[:'extraMileageCharge']
      end

      if attributes.has_key?(:'lateFeeAmount')
        self.late_fee_amount = attributes[:'lateFeeAmount']
      end

      if attributes.has_key?(:'towingCharge')
        self.towing_charge = attributes[:'towingCharge']
      end

      if attributes.has_key?(:'extraCharge')
        self.extra_charge = attributes[:'extraCharge']
      end

      if attributes.has_key?(:'gpsCharge')
        self.gps_charge = attributes[:'gpsCharge']
      end

      if attributes.has_key?(:'phoneCharge')
        self.phone_charge = attributes[:'phoneCharge']
      end

      if attributes.has_key?(:'parkingViolationCharge')
        self.parking_violation_charge = attributes[:'parkingViolationCharge']
      end

      if attributes.has_key?(:'otherCharges')
        self.other_charges = attributes[:'otherCharges']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if !@customer_name.nil? && @customer_name.to_s.length > 40
        invalid_properties.push('invalid value for "customer_name", the character length must be smaller than or equal to 40.')
      end

      if !@vehicle_class.nil? && @vehicle_class.to_s.length > 4
        invalid_properties.push('invalid value for "vehicle_class", the character length must be smaller than or equal to 4.')
      end

      if !@distance_travelled.nil? && @distance_travelled.to_s.length > 5
        invalid_properties.push('invalid value for "distance_travelled", the character length must be smaller than or equal to 5.')
      end

      if !@distance_unit.nil? && @distance_unit.to_s.length > 1
        invalid_properties.push('invalid value for "distance_unit", the character length must be smaller than or equal to 1.')
      end

      if !@return_date_time.nil? && @return_date_time.to_s.length > 21
        invalid_properties.push('invalid value for "return_date_time", the character length must be smaller than or equal to 21.')
      end

      if !@rental_date_time.nil? && @rental_date_time.to_s.length > 21
        invalid_properties.push('invalid value for "rental_date_time", the character length must be smaller than or equal to 21.')
      end

      if !@max_free_distance.nil? && @max_free_distance.to_s.length > 4
        invalid_properties.push('invalid value for "max_free_distance", the character length must be smaller than or equal to 4.')
      end

      if !@program_code.nil? && @program_code.to_s.length > 2
        invalid_properties.push('invalid value for "program_code", the character length must be smaller than or equal to 2.')
      end

      if !@agreement_number.nil? && @agreement_number.to_s.length > 25
        invalid_properties.push('invalid value for "agreement_number", the character length must be smaller than or equal to 25.')
      end

      if !@odometer_reading.nil? && @odometer_reading.to_s.length > 8
        invalid_properties.push('invalid value for "odometer_reading", the character length must be smaller than or equal to 8.')
      end

      if !@vehicle_identification_number.nil? && @vehicle_identification_number.to_s.length > 20
        invalid_properties.push('invalid value for "vehicle_identification_number", the character length must be smaller than or equal to 20.')
      end

      if !@company_id.nil? && @company_id.to_s.length > 12
        invalid_properties.push('invalid value for "company_id", the character length must be smaller than or equal to 12.')
      end

      if !@number_of_additional_drivers.nil? && @number_of_additional_drivers.to_s.length > 1
        invalid_properties.push('invalid value for "number_of_additional_drivers", the character length must be smaller than or equal to 1.')
      end

      if !@driver_age.nil? && @driver_age.to_s.length > 3
        invalid_properties.push('invalid value for "driver_age", the character length must be smaller than or equal to 3.')
      end

      if !@special_program_code.nil? && @special_program_code.to_s.length > 2
        invalid_properties.push('invalid value for "special_program_code", the character length must be smaller than or equal to 2.')
      end

      if !@vehicle_make.nil? && @vehicle_make.to_s.length > 10
        invalid_properties.push('invalid value for "vehicle_make", the character length must be smaller than or equal to 10.')
      end

      if !@vehicle_model.nil? && @vehicle_model.to_s.length > 10
        invalid_properties.push('invalid value for "vehicle_model", the character length must be smaller than or equal to 10.')
      end

      if !@time_period.nil? && @time_period.to_s.length > 7
        invalid_properties.push('invalid value for "time_period", the character length must be smaller than or equal to 7.')
      end

      if !@commodity_code.nil? && @commodity_code.to_s.length > 15
        invalid_properties.push('invalid value for "commodity_code", the character length must be smaller than or equal to 15.')
      end

      if !@customer_service_phone_number.nil? && @customer_service_phone_number.to_s.length > 17
        invalid_properties.push('invalid value for "customer_service_phone_number", the character length must be smaller than or equal to 17.')
      end

      if !@insurance_amount.nil? && @insurance_amount.to_s.length > 12
        invalid_properties.push('invalid value for "insurance_amount", the character length must be smaller than or equal to 12.')
      end

      if !@one_way_drop_off_amount.nil? && @one_way_drop_off_amount.to_s.length > 12
        invalid_properties.push('invalid value for "one_way_drop_off_amount", the character length must be smaller than or equal to 12.')
      end

      if !@adjusted_amount_indicator.nil? && @adjusted_amount_indicator.to_s.length > 1
        invalid_properties.push('invalid value for "adjusted_amount_indicator", the character length must be smaller than or equal to 1.')
      end

      if !@adjusted_amount.nil? && @adjusted_amount.to_s.length > 12
        invalid_properties.push('invalid value for "adjusted_amount", the character length must be smaller than or equal to 12.')
      end

      if !@fuel_charges.nil? && @fuel_charges.to_s.length > 12
        invalid_properties.push('invalid value for "fuel_charges", the character length must be smaller than or equal to 12.')
      end

      if !@weekly_rental_rate.nil? && @weekly_rental_rate.to_s.length > 12
        invalid_properties.push('invalid value for "weekly_rental_rate", the character length must be smaller than or equal to 12.')
      end

      if !@daily_rental_rate.nil? && @daily_rental_rate.to_s.length > 12
        invalid_properties.push('invalid value for "daily_rental_rate", the character length must be smaller than or equal to 12.')
      end

      if !@rate_per_mile.nil? && @rate_per_mile.to_s.length > 12
        invalid_properties.push('invalid value for "rate_per_mile", the character length must be smaller than or equal to 12.')
      end

      if !@mileage_charge.nil? && @mileage_charge.to_s.length > 12
        invalid_properties.push('invalid value for "mileage_charge", the character length must be smaller than or equal to 12.')
      end

      if !@extra_mileage_charge.nil? && @extra_mileage_charge.to_s.length > 12
        invalid_properties.push('invalid value for "extra_mileage_charge", the character length must be smaller than or equal to 12.')
      end

      if !@late_fee_amount.nil? && @late_fee_amount.to_s.length > 12
        invalid_properties.push('invalid value for "late_fee_amount", the character length must be smaller than or equal to 12.')
      end

      if !@towing_charge.nil? && @towing_charge.to_s.length > 4
        invalid_properties.push('invalid value for "towing_charge", the character length must be smaller than or equal to 4.')
      end

      if !@extra_charge.nil? && @extra_charge.to_s.length > 12
        invalid_properties.push('invalid value for "extra_charge", the character length must be smaller than or equal to 12.')
      end

      if !@gps_charge.nil? && @gps_charge.to_s.length > 12
        invalid_properties.push('invalid value for "gps_charge", the character length must be smaller than or equal to 12.')
      end

      if !@phone_charge.nil? && @phone_charge.to_s.length > 12
        invalid_properties.push('invalid value for "phone_charge", the character length must be smaller than or equal to 12.')
      end

      if !@parking_violation_charge.nil? && @parking_violation_charge.to_s.length > 12
        invalid_properties.push('invalid value for "parking_violation_charge", the character length must be smaller than or equal to 12.')
      end

      if !@other_charges.nil? && @other_charges.to_s.length > 12
        invalid_properties.push('invalid value for "other_charges", the character length must be smaller than or equal to 12.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if !@customer_name.nil? && @customer_name.to_s.length > 40
      return false if !@vehicle_class.nil? && @vehicle_class.to_s.length > 4
      return false if !@distance_travelled.nil? && @distance_travelled.to_s.length > 5
      return false if !@distance_unit.nil? && @distance_unit.to_s.length > 1
      return false if !@return_date_time.nil? && @return_date_time.to_s.length > 21
      return false if !@rental_date_time.nil? && @rental_date_time.to_s.length > 21
      return false if !@max_free_distance.nil? && @max_free_distance.to_s.length > 4
      return false if !@program_code.nil? && @program_code.to_s.length > 2
      return false if !@agreement_number.nil? && @agreement_number.to_s.length > 25
      return false if !@odometer_reading.nil? && @odometer_reading.to_s.length > 8
      return false if !@vehicle_identification_number.nil? && @vehicle_identification_number.to_s.length > 20
      return false if !@company_id.nil? && @company_id.to_s.length > 12
      return false if !@number_of_additional_drivers.nil? && @number_of_additional_drivers.to_s.length > 1
      return false if !@driver_age.nil? && @driver_age.to_s.length > 3
      return false if !@special_program_code.nil? && @special_program_code.to_s.length > 2
      return false if !@vehicle_make.nil? && @vehicle_make.to_s.length > 10
      return false if !@vehicle_model.nil? && @vehicle_model.to_s.length > 10
      return false if !@time_period.nil? && @time_period.to_s.length > 7
      return false if !@commodity_code.nil? && @commodity_code.to_s.length > 15
      return false if !@customer_service_phone_number.nil? && @customer_service_phone_number.to_s.length > 17
      return false if !@insurance_amount.nil? && @insurance_amount.to_s.length > 12
      return false if !@one_way_drop_off_amount.nil? && @one_way_drop_off_amount.to_s.length > 12
      return false if !@adjusted_amount_indicator.nil? && @adjusted_amount_indicator.to_s.length > 1
      return false if !@adjusted_amount.nil? && @adjusted_amount.to_s.length > 12
      return false if !@fuel_charges.nil? && @fuel_charges.to_s.length > 12
      return false if !@weekly_rental_rate.nil? && @weekly_rental_rate.to_s.length > 12
      return false if !@daily_rental_rate.nil? && @daily_rental_rate.to_s.length > 12
      return false if !@rate_per_mile.nil? && @rate_per_mile.to_s.length > 12
      return false if !@mileage_charge.nil? && @mileage_charge.to_s.length > 12
      return false if !@extra_mileage_charge.nil? && @extra_mileage_charge.to_s.length > 12
      return false if !@late_fee_amount.nil? && @late_fee_amount.to_s.length > 12
      return false if !@towing_charge.nil? && @towing_charge.to_s.length > 4
      return false if !@extra_charge.nil? && @extra_charge.to_s.length > 12
      return false if !@gps_charge.nil? && @gps_charge.to_s.length > 12
      return false if !@phone_charge.nil? && @phone_charge.to_s.length > 12
      return false if !@parking_violation_charge.nil? && @parking_violation_charge.to_s.length > 12
      return false if !@other_charges.nil? && @other_charges.to_s.length > 12
      true
    end

    # Custom attribute writer method with validation
    # @param [Object] customer_name Value to be assigned
    def customer_name=(customer_name)
      if !customer_name.nil? && customer_name.to_s.length > 40
        fail ArgumentError, 'invalid value for "customer_name", the character length must be smaller than or equal to 40.'
      end

      @customer_name = customer_name
    end

    # Custom attribute writer method with validation
    # @param [Object] vehicle_class Value to be assigned
    def vehicle_class=(vehicle_class)
      if !vehicle_class.nil? && vehicle_class.to_s.length > 4
        fail ArgumentError, 'invalid value for "vehicle_class", the character length must be smaller than or equal to 4.'
      end

      @vehicle_class = vehicle_class
    end

    # Custom attribute writer method with validation
    # @param [Object] distance_travelled Value to be assigned
    def distance_travelled=(distance_travelled)
      if !distance_travelled.nil? && distance_travelled.to_s.length > 5
        fail ArgumentError, 'invalid value for "distance_travelled", the character length must be smaller than or equal to 5.'
      end

      @distance_travelled = distance_travelled
    end

    # Custom attribute writer method with validation
    # @param [Object] distance_unit Value to be assigned
    def distance_unit=(distance_unit)
      if !distance_unit.nil? && distance_unit.to_s.length > 1
        fail ArgumentError, 'invalid value for "distance_unit", the character length must be smaller than or equal to 1.'
      end

      @distance_unit = distance_unit
    end

    # Custom attribute writer method with validation
    # @param [Object] return_date_time Value to be assigned
    def return_date_time=(return_date_time)
      if !return_date_time.nil? && return_date_time.to_s.length > 21
        fail ArgumentError, 'invalid value for "return_date_time", the character length must be smaller than or equal to 21.'
      end

      @return_date_time = return_date_time
    end

    # Custom attribute writer method with validation
    # @param [Object] rental_date_time Value to be assigned
    def rental_date_time=(rental_date_time)
      if !rental_date_time.nil? && rental_date_time.to_s.length > 21
        fail ArgumentError, 'invalid value for "rental_date_time", the character length must be smaller than or equal to 21.'
      end

      @rental_date_time = rental_date_time
    end

    # Custom attribute writer method with validation
    # @param [Object] max_free_distance Value to be assigned
    def max_free_distance=(max_free_distance)
      if !max_free_distance.nil? && max_free_distance.to_s.length > 4
        fail ArgumentError, 'invalid value for "max_free_distance", the character length must be smaller than or equal to 4.'
      end

      @max_free_distance = max_free_distance
    end

    # Custom attribute writer method with validation
    # @param [Object] program_code Value to be assigned
    def program_code=(program_code)
      if !program_code.nil? && program_code.to_s.length > 2
        fail ArgumentError, 'invalid value for "program_code", the character length must be smaller than or equal to 2.'
      end

      @program_code = program_code
    end

    # Custom attribute writer method with validation
    # @param [Object] agreement_number Value to be assigned
    def agreement_number=(agreement_number)
      if !agreement_number.nil? && agreement_number.to_s.length > 25
        fail ArgumentError, 'invalid value for "agreement_number", the character length must be smaller than or equal to 25.'
      end

      @agreement_number = agreement_number
    end

    # Custom attribute writer method with validation
    # @param [Object] odometer_reading Value to be assigned
    def odometer_reading=(odometer_reading)
      if !odometer_reading.nil? && odometer_reading.to_s.length > 8
        fail ArgumentError, 'invalid value for "odometer_reading", the character length must be smaller than or equal to 8.'
      end

      @odometer_reading = odometer_reading
    end

    # Custom attribute writer method with validation
    # @param [Object] vehicle_identification_number Value to be assigned
    def vehicle_identification_number=(vehicle_identification_number)
      if !vehicle_identification_number.nil? && vehicle_identification_number.to_s.length > 20
        fail ArgumentError, 'invalid value for "vehicle_identification_number", the character length must be smaller than or equal to 20.'
      end

      @vehicle_identification_number = vehicle_identification_number
    end

    # Custom attribute writer method with validation
    # @param [Object] company_id Value to be assigned
    def company_id=(company_id)
      if !company_id.nil? && company_id.to_s.length > 12
        fail ArgumentError, 'invalid value for "company_id", the character length must be smaller than or equal to 12.'
      end

      @company_id = company_id
    end

    # Custom attribute writer method with validation
    # @param [Object] number_of_additional_drivers Value to be assigned
    def number_of_additional_drivers=(number_of_additional_drivers)
      if !number_of_additional_drivers.nil? && number_of_additional_drivers.to_s.length > 1
        fail ArgumentError, 'invalid value for "number_of_additional_drivers", the character length must be smaller than or equal to 1.'
      end

      @number_of_additional_drivers = number_of_additional_drivers
    end

    # Custom attribute writer method with validation
    # @param [Object] driver_age Value to be assigned
    def driver_age=(driver_age)
      if !driver_age.nil? && driver_age.to_s.length > 3
        fail ArgumentError, 'invalid value for "driver_age", the character length must be smaller than or equal to 3.'
      end

      @driver_age = driver_age
    end

    # Custom attribute writer method with validation
    # @param [Object] special_program_code Value to be assigned
    def special_program_code=(special_program_code)
      if !special_program_code.nil? && special_program_code.to_s.length > 2
        fail ArgumentError, 'invalid value for "special_program_code", the character length must be smaller than or equal to 2.'
      end

      @special_program_code = special_program_code
    end

    # Custom attribute writer method with validation
    # @param [Object] vehicle_make Value to be assigned
    def vehicle_make=(vehicle_make)
      if !vehicle_make.nil? && vehicle_make.to_s.length > 10
        fail ArgumentError, 'invalid value for "vehicle_make", the character length must be smaller than or equal to 10.'
      end

      @vehicle_make = vehicle_make
    end

    # Custom attribute writer method with validation
    # @param [Object] vehicle_model Value to be assigned
    def vehicle_model=(vehicle_model)
      if !vehicle_model.nil? && vehicle_model.to_s.length > 10
        fail ArgumentError, 'invalid value for "vehicle_model", the character length must be smaller than or equal to 10.'
      end

      @vehicle_model = vehicle_model
    end

    # Custom attribute writer method with validation
    # @param [Object] time_period Value to be assigned
    def time_period=(time_period)
      if !time_period.nil? && time_period.to_s.length > 7
        fail ArgumentError, 'invalid value for "time_period", the character length must be smaller than or equal to 7.'
      end

      @time_period = time_period
    end

    # Custom attribute writer method with validation
    # @param [Object] commodity_code Value to be assigned
    def commodity_code=(commodity_code)
      if !commodity_code.nil? && commodity_code.to_s.length > 15
        fail ArgumentError, 'invalid value for "commodity_code", the character length must be smaller than or equal to 15.'
      end

      @commodity_code = commodity_code
    end

    # Custom attribute writer method with validation
    # @param [Object] customer_service_phone_number Value to be assigned
    def customer_service_phone_number=(customer_service_phone_number)
      if !customer_service_phone_number.nil? && customer_service_phone_number.to_s.length > 17
        fail ArgumentError, 'invalid value for "customer_service_phone_number", the character length must be smaller than or equal to 17.'
      end

      @customer_service_phone_number = customer_service_phone_number
    end

    # Custom attribute writer method with validation
    # @param [Object] insurance_amount Value to be assigned
    def insurance_amount=(insurance_amount)
      if !insurance_amount.nil? && insurance_amount.to_s.length > 12
        fail ArgumentError, 'invalid value for "insurance_amount", the character length must be smaller than or equal to 12.'
      end

      @insurance_amount = insurance_amount
    end

    # Custom attribute writer method with validation
    # @param [Object] one_way_drop_off_amount Value to be assigned
    def one_way_drop_off_amount=(one_way_drop_off_amount)
      if !one_way_drop_off_amount.nil? && one_way_drop_off_amount.to_s.length > 12
        fail ArgumentError, 'invalid value for "one_way_drop_off_amount", the character length must be smaller than or equal to 12.'
      end

      @one_way_drop_off_amount = one_way_drop_off_amount
    end

    # Custom attribute writer method with validation
    # @param [Object] adjusted_amount_indicator Value to be assigned
    def adjusted_amount_indicator=(adjusted_amount_indicator)
      if !adjusted_amount_indicator.nil? && adjusted_amount_indicator.to_s.length > 1
        fail ArgumentError, 'invalid value for "adjusted_amount_indicator", the character length must be smaller than or equal to 1.'
      end

      @adjusted_amount_indicator = adjusted_amount_indicator
    end

    # Custom attribute writer method with validation
    # @param [Object] adjusted_amount Value to be assigned
    def adjusted_amount=(adjusted_amount)
      if !adjusted_amount.nil? && adjusted_amount.to_s.length > 12
        fail ArgumentError, 'invalid value for "adjusted_amount", the character length must be smaller than or equal to 12.'
      end

      @adjusted_amount = adjusted_amount
    end

    # Custom attribute writer method with validation
    # @param [Object] fuel_charges Value to be assigned
    def fuel_charges=(fuel_charges)
      if !fuel_charges.nil? && fuel_charges.to_s.length > 12
        fail ArgumentError, 'invalid value for "fuel_charges", the character length must be smaller than or equal to 12.'
      end

      @fuel_charges = fuel_charges
    end

    # Custom attribute writer method with validation
    # @param [Object] weekly_rental_rate Value to be assigned
    def weekly_rental_rate=(weekly_rental_rate)
      if !weekly_rental_rate.nil? && weekly_rental_rate.to_s.length > 12
        fail ArgumentError, 'invalid value for "weekly_rental_rate", the character length must be smaller than or equal to 12.'
      end

      @weekly_rental_rate = weekly_rental_rate
    end

    # Custom attribute writer method with validation
    # @param [Object] daily_rental_rate Value to be assigned
    def daily_rental_rate=(daily_rental_rate)
      if !daily_rental_rate.nil? && daily_rental_rate.to_s.length > 12
        fail ArgumentError, 'invalid value for "daily_rental_rate", the character length must be smaller than or equal to 12.'
      end

      @daily_rental_rate = daily_rental_rate
    end

    # Custom attribute writer method with validation
    # @param [Object] rate_per_mile Value to be assigned
    def rate_per_mile=(rate_per_mile)
      if !rate_per_mile.nil? && rate_per_mile.to_s.length > 12
        fail ArgumentError, 'invalid value for "rate_per_mile", the character length must be smaller than or equal to 12.'
      end

      @rate_per_mile = rate_per_mile
    end

    # Custom attribute writer method with validation
    # @param [Object] mileage_charge Value to be assigned
    def mileage_charge=(mileage_charge)
      if !mileage_charge.nil? && mileage_charge.to_s.length > 12
        fail ArgumentError, 'invalid value for "mileage_charge", the character length must be smaller than or equal to 12.'
      end

      @mileage_charge = mileage_charge
    end

    # Custom attribute writer method with validation
    # @param [Object] extra_mileage_charge Value to be assigned
    def extra_mileage_charge=(extra_mileage_charge)
      if !extra_mileage_charge.nil? && extra_mileage_charge.to_s.length > 12
        fail ArgumentError, 'invalid value for "extra_mileage_charge", the character length must be smaller than or equal to 12.'
      end

      @extra_mileage_charge = extra_mileage_charge
    end

    # Custom attribute writer method with validation
    # @param [Object] late_fee_amount Value to be assigned
    def late_fee_amount=(late_fee_amount)
      if !late_fee_amount.nil? && late_fee_amount.to_s.length > 12
        fail ArgumentError, 'invalid value for "late_fee_amount", the character length must be smaller than or equal to 12.'
      end

      @late_fee_amount = late_fee_amount
    end

    # Custom attribute writer method with validation
    # @param [Object] towing_charge Value to be assigned
    def towing_charge=(towing_charge)
      if !towing_charge.nil? && towing_charge.to_s.length > 4
        fail ArgumentError, 'invalid value for "towing_charge", the character length must be smaller than or equal to 4.'
      end

      @towing_charge = towing_charge
    end

    # Custom attribute writer method with validation
    # @param [Object] extra_charge Value to be assigned
    def extra_charge=(extra_charge)
      if !extra_charge.nil? && extra_charge.to_s.length > 12
        fail ArgumentError, 'invalid value for "extra_charge", the character length must be smaller than or equal to 12.'
      end

      @extra_charge = extra_charge
    end

    # Custom attribute writer method with validation
    # @param [Object] gps_charge Value to be assigned
    def gps_charge=(gps_charge)
      if !gps_charge.nil? && gps_charge.to_s.length > 12
        fail ArgumentError, 'invalid value for "gps_charge", the character length must be smaller than or equal to 12.'
      end

      @gps_charge = gps_charge
    end

    # Custom attribute writer method with validation
    # @param [Object] phone_charge Value to be assigned
    def phone_charge=(phone_charge)
      if !phone_charge.nil? && phone_charge.to_s.length > 12
        fail ArgumentError, 'invalid value for "phone_charge", the character length must be smaller than or equal to 12.'
      end

      @phone_charge = phone_charge
    end

    # Custom attribute writer method with validation
    # @param [Object] parking_violation_charge Value to be assigned
    def parking_violation_charge=(parking_violation_charge)
      if !parking_violation_charge.nil? && parking_violation_charge.to_s.length > 12
        fail ArgumentError, 'invalid value for "parking_violation_charge", the character length must be smaller than or equal to 12.'
      end

      @parking_violation_charge = parking_violation_charge
    end

    # Custom attribute writer method with validation
    # @param [Object] other_charges Value to be assigned
    def other_charges=(other_charges)
      if !other_charges.nil? && other_charges.to_s.length > 12
        fail ArgumentError, 'invalid value for "other_charges", the character length must be smaller than or equal to 12.'
      end

      @other_charges = other_charges
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          no_show_indicator == o.no_show_indicator &&
          customer_name == o.customer_name &&
          vehicle_class == o.vehicle_class &&
          distance_travelled == o.distance_travelled &&
          distance_unit == o.distance_unit &&
          return_date_time == o.return_date_time &&
          rental_date_time == o.rental_date_time &&
          max_free_distance == o.max_free_distance &&
          insurance_indicator == o.insurance_indicator &&
          program_code == o.program_code &&
          return_address == o.return_address &&
          rental_address == o.rental_address &&
          agreement_number == o.agreement_number &&
          odometer_reading == o.odometer_reading &&
          vehicle_identification_number == o.vehicle_identification_number &&
          company_id == o.company_id &&
          number_of_additional_drivers == o.number_of_additional_drivers &&
          driver_age == o.driver_age &&
          special_program_code == o.special_program_code &&
          vehicle_make == o.vehicle_make &&
          vehicle_model == o.vehicle_model &&
          time_period == o.time_period &&
          commodity_code == o.commodity_code &&
          customer_service_phone_number == o.customer_service_phone_number &&
          tax_details == o.tax_details &&
          insurance_amount == o.insurance_amount &&
          one_way_drop_off_amount == o.one_way_drop_off_amount &&
          adjusted_amount_indicator == o.adjusted_amount_indicator &&
          adjusted_amount == o.adjusted_amount &&
          fuel_charges == o.fuel_charges &&
          weekly_rental_rate == o.weekly_rental_rate &&
          daily_rental_rate == o.daily_rental_rate &&
          rate_per_mile == o.rate_per_mile &&
          mileage_charge == o.mileage_charge &&
          extra_mileage_charge == o.extra_mileage_charge &&
          late_fee_amount == o.late_fee_amount &&
          towing_charge == o.towing_charge &&
          extra_charge == o.extra_charge &&
          gps_charge == o.gps_charge &&
          phone_charge == o.phone_charge &&
          parking_violation_charge == o.parking_violation_charge &&
          other_charges == o.other_charges
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [no_show_indicator, customer_name, vehicle_class, distance_travelled, distance_unit, return_date_time, rental_date_time, max_free_distance, insurance_indicator, program_code, return_address, rental_address, agreement_number, odometer_reading, vehicle_identification_number, company_id, number_of_additional_drivers, driver_age, special_program_code, vehicle_make, vehicle_model, time_period, commodity_code, customer_service_phone_number, tax_details, insurance_amount, one_way_drop_off_amount, adjusted_amount_indicator, adjusted_amount, fuel_charges, weekly_rental_rate, daily_rental_rate, rate_per_mile, mileage_charge, extra_mileage_charge, late_fee_amount, towing_charge, extra_charge, gps_charge, phone_charge, parking_violation_charge, other_charges].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = CyberSource.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
