=begin
#CyberSource Merged Spec

#All CyberSource API specs merged together. These are available at https://developer.cybersource.com/api/reference/api-reference.html

OpenAPI spec version: 0.0.1

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.2.3

=end

require 'date'

module CyberSource
  class RiskV1AddressVerificationsPost201ResponseAddressVerificationInformation
    # Contains the record type of the postal code with which the address was matched.  #### U.S. Addresses Depending on the quantity and quality of the address information provided, this field contains one or two characters:  - One character: sufficient correct information was provided to result in accurate matching. - Two characters: standardization would provide a better address if more or better input address information were available. The second character is D (default).  Blank fields are unassigned. When an address cannot be standardized, how the input data was parsed determines the address type. In this case, standardization may indicate a street, rural route, highway contract, general delivery, or PO box. For possible values, see the description for the `dav_address_type` reply field in [CyberSource Verification Services Using the SCMP API](https://apps.cybersource.com/library/documentation/dev_guides/Verification_Svcs_SCMP_API/html/)  #### All Other Countries This field contains one of the following values: - P: Post. - S: Street. - x: Unknown. 
    attr_accessor :address_type

    attr_accessor :bar_code

    # Value can be - Canada - US - International The values of errorCode and statusCode mean different things depending on the applicable region. Refer to the guide for more info. 
    attr_accessor :applicable_region

    # Four-character error code returned for Canadian, US and international addresses. For possible values, see Verification Services guide. The meaning of the errorCode depends on value of applicableRegion. 
    attr_accessor :error_code

    # Four-to-ten character status code returned for Canadian, US and international addresses. For possible values, see Verification Services guide. The meaning of the errorCode depends on value of applicableRegion. 
    attr_accessor :status_code

    # Care of data dropped from the standard address.
    attr_accessor :care_of

    # Indicates the probable correctness of the address match. Returned for U.S. and Canadian addresses. Returns a value from 0-9, where 0 is most likely to be correct and 9 is least likely to be correct, or -1 if there is no address match. 
    attr_accessor :match_score

    attr_accessor :standard_address

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'address_type' => :'addressType',
        :'bar_code' => :'barCode',
        :'applicable_region' => :'applicableRegion',
        :'error_code' => :'errorCode',
        :'status_code' => :'statusCode',
        :'care_of' => :'careOf',
        :'match_score' => :'matchScore',
        :'standard_address' => :'standardAddress'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'address_type' => :'String',
        :'bar_code' => :'RiskV1AddressVerificationsPost201ResponseAddressVerificationInformationBarCode',
        :'applicable_region' => :'String',
        :'error_code' => :'String',
        :'status_code' => :'String',
        :'care_of' => :'String',
        :'match_score' => :'Integer',
        :'standard_address' => :'RiskV1AddressVerificationsPost201ResponseAddressVerificationInformationStandardAddress'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      if attributes.has_key?(:'addressType')
        self.address_type = attributes[:'addressType']
      end

      if attributes.has_key?(:'barCode')
        self.bar_code = attributes[:'barCode']
      end

      if attributes.has_key?(:'applicableRegion')
        self.applicable_region = attributes[:'applicableRegion']
      end

      if attributes.has_key?(:'errorCode')
        self.error_code = attributes[:'errorCode']
      end

      if attributes.has_key?(:'statusCode')
        self.status_code = attributes[:'statusCode']
      end

      if attributes.has_key?(:'careOf')
        self.care_of = attributes[:'careOf']
      end

      if attributes.has_key?(:'matchScore')
        self.match_score = attributes[:'matchScore']
      end

      if attributes.has_key?(:'standardAddress')
        self.standard_address = attributes[:'standardAddress']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if !@address_type.nil? && @address_type.to_s.length > 255
        invalid_properties.push('invalid value for "address_type", the character length must be smaller than or equal to 255.')
      end

      if !@applicable_region.nil? && @applicable_region.to_s.length > 255
        invalid_properties.push('invalid value for "applicable_region", the character length must be smaller than or equal to 255.')
      end

      if !@error_code.nil? && @error_code.to_s.length > 255
        invalid_properties.push('invalid value for "error_code", the character length must be smaller than or equal to 255.')
      end

      if !@status_code.nil? && @status_code.to_s.length > 255
        invalid_properties.push('invalid value for "status_code", the character length must be smaller than or equal to 255.')
      end

      if !@care_of.nil? && @care_of.to_s.length > 255
        invalid_properties.push('invalid value for "care_of", the character length must be smaller than or equal to 255.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if !@address_type.nil? && @address_type.to_s.length > 255
      return false if !@applicable_region.nil? && @applicable_region.to_s.length > 255
      return false if !@error_code.nil? && @error_code.to_s.length > 255
      return false if !@status_code.nil? && @status_code.to_s.length > 255
      return false if !@care_of.nil? && @care_of.to_s.length > 255
      true
    end

    # Custom attribute writer method with validation
    # @param [Object] address_type Value to be assigned
    def address_type=(address_type)
      if !address_type.nil? && address_type.to_s.length > 255
        fail ArgumentError, 'invalid value for "address_type", the character length must be smaller than or equal to 255.'
      end

      @address_type = address_type
    end

    # Custom attribute writer method with validation
    # @param [Object] applicable_region Value to be assigned
    def applicable_region=(applicable_region)
      if !applicable_region.nil? && applicable_region.to_s.length > 255
        fail ArgumentError, 'invalid value for "applicable_region", the character length must be smaller than or equal to 255.'
      end

      @applicable_region = applicable_region
    end

    # Custom attribute writer method with validation
    # @param [Object] error_code Value to be assigned
    def error_code=(error_code)
      if !error_code.nil? && error_code.to_s.length > 255
        fail ArgumentError, 'invalid value for "error_code", the character length must be smaller than or equal to 255.'
      end

      @error_code = error_code
    end

    # Custom attribute writer method with validation
    # @param [Object] status_code Value to be assigned
    def status_code=(status_code)
      if !status_code.nil? && status_code.to_s.length > 255
        fail ArgumentError, 'invalid value for "status_code", the character length must be smaller than or equal to 255.'
      end

      @status_code = status_code
    end

    # Custom attribute writer method with validation
    # @param [Object] care_of Value to be assigned
    def care_of=(care_of)
      if !care_of.nil? && care_of.to_s.length > 255
        fail ArgumentError, 'invalid value for "care_of", the character length must be smaller than or equal to 255.'
      end

      @care_of = care_of
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          address_type == o.address_type &&
          bar_code == o.bar_code &&
          applicable_region == o.applicable_region &&
          error_code == o.error_code &&
          status_code == o.status_code &&
          care_of == o.care_of &&
          match_score == o.match_score &&
          standard_address == o.standard_address
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [address_type, bar_code, applicable_region, error_code, status_code, care_of, match_score, standard_address].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = CyberSource.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
