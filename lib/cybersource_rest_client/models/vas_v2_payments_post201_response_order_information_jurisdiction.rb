=begin
#CyberSource Merged Spec

#All CyberSource API specs merged together. These are available at https://developer.cybersource.com/api/reference/api-reference.html

OpenAPI spec version: 0.0.1

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.2.3

=end

require 'date'

module CyberSource
  class VasV2PaymentsPost201ResponseOrderInformationJurisdiction
    # Type of tax jurisdiction for the item. Returned only if the `taxInformation.showTaxPerLineItem` field is set to `Yes`.  Possible values: - `city` - `county` - `state` - `country` - `special` 
    attr_accessor :type

    # Name of the jurisdiction tax for the item. For example, CA State Tax. Returned only if the `taxInformation.showTaxPerLineItem` field is set to `Yes`. 
    attr_accessor :tax_name

    # Jurisdiction tax amount for the item. Returned only if the `taxInformation.showTaxPerLineItem` field is set to `Yes`. 
    attr_accessor :tax_amount

    # Jurisdiction taxable amount for the item, not including product level exemptions. Returned only if the `taxInformation.showTaxPerLineItem` field is set to `Yes`. 
    attr_accessor :taxable

    # Free-text description of the jurisdiction for the item. For example, San Mateo County. Returned only if the `taxInformation.showTaxPerLineItem` field is set to `Yes`. 
    attr_accessor :name

    # Jurisdiction code assigned by the tax provider. Returned only if the `taxInformation.showTaxPerLineItem` field is set to `Yes`. 
    attr_accessor :code

    # Jurisdiction tax rate for the item. Returned only if the `taxInformation.showTaxPerLineItem` field is set to `Yes`. 
    attr_accessor :rate

    # Free-text description of the jurisdiction region for the item. For example, CA (California State) or GB (Great Britain). Returned only if the `taxInformation.showTaxPerLineItem` field is set to `Yes`. 
    attr_accessor :region

    # Tax jurisdiction country for the item. Returned only if the `taxInformation.showTaxPerLineItem` field is set to `Yes`. 
    attr_accessor :country

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'type' => :'type',
        :'tax_name' => :'taxName',
        :'tax_amount' => :'taxAmount',
        :'taxable' => :'taxable',
        :'name' => :'name',
        :'code' => :'code',
        :'rate' => :'rate',
        :'region' => :'region',
        :'country' => :'country'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'type' => :'String',
        :'tax_name' => :'String',
        :'tax_amount' => :'String',
        :'taxable' => :'String',
        :'name' => :'String',
        :'code' => :'String',
        :'rate' => :'String',
        :'region' => :'String',
        :'country' => :'String'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      if attributes.has_key?(:'type')
        self.type = attributes[:'type']
      end

      if attributes.has_key?(:'taxName')
        self.tax_name = attributes[:'taxName']
      end

      if attributes.has_key?(:'taxAmount')
        self.tax_amount = attributes[:'taxAmount']
      end

      if attributes.has_key?(:'taxable')
        self.taxable = attributes[:'taxable']
      end

      if attributes.has_key?(:'name')
        self.name = attributes[:'name']
      end

      if attributes.has_key?(:'code')
        self.code = attributes[:'code']
      end

      if attributes.has_key?(:'rate')
        self.rate = attributes[:'rate']
      end

      if attributes.has_key?(:'region')
        self.region = attributes[:'region']
      end

      if attributes.has_key?(:'country')
        self.country = attributes[:'country']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if !@type.nil? && @type.to_s.length > 15
        invalid_properties.push('invalid value for "type", the character length must be smaller than or equal to 15.')
      end

      if !@tax_name.nil? && @tax_name.to_s.length > 15
        invalid_properties.push('invalid value for "tax_name", the character length must be smaller than or equal to 15.')
      end

      if !@tax_amount.nil? && @tax_amount.to_s.length > 15
        invalid_properties.push('invalid value for "tax_amount", the character length must be smaller than or equal to 15.')
      end

      if !@taxable.nil? && @taxable.to_s.length > 15
        invalid_properties.push('invalid value for "taxable", the character length must be smaller than or equal to 15.')
      end

      if !@code.nil? && @code.to_s.length > 15
        invalid_properties.push('invalid value for "code", the character length must be smaller than or equal to 15.')
      end

      if !@rate.nil? && @rate.to_s.length > 15
        invalid_properties.push('invalid value for "rate", the character length must be smaller than or equal to 15.')
      end

      if !@region.nil? && @region.to_s.length > 15
        invalid_properties.push('invalid value for "region", the character length must be smaller than or equal to 15.')
      end

      if !@country.nil? && @country.to_s.length > 15
        invalid_properties.push('invalid value for "country", the character length must be smaller than or equal to 15.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if !@type.nil? && @type.to_s.length > 15
      return false if !@tax_name.nil? && @tax_name.to_s.length > 15
      return false if !@tax_amount.nil? && @tax_amount.to_s.length > 15
      return false if !@taxable.nil? && @taxable.to_s.length > 15
      return false if !@code.nil? && @code.to_s.length > 15
      return false if !@rate.nil? && @rate.to_s.length > 15
      return false if !@region.nil? && @region.to_s.length > 15
      return false if !@country.nil? && @country.to_s.length > 15
      true
    end

    # Custom attribute writer method with validation
    # @param [Object] type Value to be assigned
    def type=(type)
      if !type.nil? && type.to_s.length > 15
        fail ArgumentError, 'invalid value for "type", the character length must be smaller than or equal to 15.'
      end

      @type = type
    end

    # Custom attribute writer method with validation
    # @param [Object] tax_name Value to be assigned
    def tax_name=(tax_name)
      if !tax_name.nil? && tax_name.to_s.length > 15
        fail ArgumentError, 'invalid value for "tax_name", the character length must be smaller than or equal to 15.'
      end

      @tax_name = tax_name
    end

    # Custom attribute writer method with validation
    # @param [Object] tax_amount Value to be assigned
    def tax_amount=(tax_amount)
      if !tax_amount.nil? && tax_amount.to_s.length > 15
        fail ArgumentError, 'invalid value for "tax_amount", the character length must be smaller than or equal to 15.'
      end

      @tax_amount = tax_amount
    end

    # Custom attribute writer method with validation
    # @param [Object] taxable Value to be assigned
    def taxable=(taxable)
      if !taxable.nil? && taxable.to_s.length > 15
        fail ArgumentError, 'invalid value for "taxable", the character length must be smaller than or equal to 15.'
      end

      @taxable = taxable
    end

    # Custom attribute writer method with validation
    # @param [Object] code Value to be assigned
    def code=(code)
      if !code.nil? && code.to_s.length > 15
        fail ArgumentError, 'invalid value for "code", the character length must be smaller than or equal to 15.'
      end

      @code = code
    end

    # Custom attribute writer method with validation
    # @param [Object] rate Value to be assigned
    def rate=(rate)
      if !rate.nil? && rate.to_s.length > 15
        fail ArgumentError, 'invalid value for "rate", the character length must be smaller than or equal to 15.'
      end

      @rate = rate
    end

    # Custom attribute writer method with validation
    # @param [Object] region Value to be assigned
    def region=(region)
      if !region.nil? && region.to_s.length > 15
        fail ArgumentError, 'invalid value for "region", the character length must be smaller than or equal to 15.'
      end

      @region = region
    end

    # Custom attribute writer method with validation
    # @param [Object] country Value to be assigned
    def country=(country)
      if !country.nil? && country.to_s.length > 15
        fail ArgumentError, 'invalid value for "country", the character length must be smaller than or equal to 15.'
      end

      @country = country
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          type == o.type &&
          tax_name == o.tax_name &&
          tax_amount == o.tax_amount &&
          taxable == o.taxable &&
          name == o.name &&
          code == o.code &&
          rate == o.rate &&
          region == o.region &&
          country == o.country
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [type, tax_name, tax_amount, taxable, name, code, rate, region, country].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = CyberSource.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
