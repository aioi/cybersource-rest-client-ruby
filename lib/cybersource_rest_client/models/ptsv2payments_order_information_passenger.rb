=begin
#CyberSource Merged Spec

#All CyberSource API specs merged together. These are available at https://developer.cybersource.com/api/reference/api-reference.html

OpenAPI spec version: 0.0.1

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.2.3

=end

require 'date'

module CyberSource
  # Contains travel-related passenger details used by DM service only.
  class Ptsv2paymentsOrderInformationPassenger
    # Passenger classification associated with the price of the ticket. You can use one of the following values: - `ADT`: Adult - `CNN`: Child - `INF`: Infant - `YTH`: Youth - `STU`: Student - `SCR`: Senior Citizen - `MIL`: Military 
    attr_accessor :type

    # Your company's passenger classification, such as with a frequent flyer program. In this case, you might use values such as `standard`, `gold`, or `platinum`. 
    attr_accessor :status

    # Passenger's phone number. If the order is from outside the U.S., CyberSource recommends that you include the [ISO Standard Country Codes](https://developer.cybersource.com/library/documentation/sbc/quickref/countries_alpha_list.pdf). 
    attr_accessor :phone

    # Passenger's first name.
    attr_accessor :first_name

    # Passenger's last name.
    attr_accessor :last_name

    # ID of the passenger to whom the ticket was issued. For example, you can use this field for the frequent flyer number. 
    attr_accessor :id

    # Passenger's email address, including the full domain name, such as jdoe@example.com.
    attr_accessor :email

    # Passenger's nationality country. Use the two character [ISO Standard Country Codes](https://developer.cybersource.com/library/documentation/sbc/quickref/countries_alpha_list.pdf).
    attr_accessor :nationality

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'type' => :'type',
        :'status' => :'status',
        :'phone' => :'phone',
        :'first_name' => :'firstName',
        :'last_name' => :'lastName',
        :'id' => :'id',
        :'email' => :'email',
        :'nationality' => :'nationality'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'type' => :'String',
        :'status' => :'String',
        :'phone' => :'String',
        :'first_name' => :'String',
        :'last_name' => :'String',
        :'id' => :'String',
        :'email' => :'String',
        :'nationality' => :'String'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      if attributes.has_key?(:'type')
        self.type = attributes[:'type']
      end

      if attributes.has_key?(:'status')
        self.status = attributes[:'status']
      end

      if attributes.has_key?(:'phone')
        self.phone = attributes[:'phone']
      end

      if attributes.has_key?(:'firstName')
        self.first_name = attributes[:'firstName']
      end

      if attributes.has_key?(:'lastName')
        self.last_name = attributes[:'lastName']
      end

      if attributes.has_key?(:'id')
        self.id = attributes[:'id']
      end

      if attributes.has_key?(:'email')
        self.email = attributes[:'email']
      end

      if attributes.has_key?(:'nationality')
        self.nationality = attributes[:'nationality']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if !@type.nil? && @type.to_s.length > 32
        invalid_properties.push('invalid value for "type", the character length must be smaller than or equal to 32.')
      end

      if !@status.nil? && @status.to_s.length > 32
        invalid_properties.push('invalid value for "status", the character length must be smaller than or equal to 32.')
      end

      if !@phone.nil? && @phone.to_s.length > 15
        invalid_properties.push('invalid value for "phone", the character length must be smaller than or equal to 15.')
      end

      if !@first_name.nil? && @first_name.to_s.length > 60
        invalid_properties.push('invalid value for "first_name", the character length must be smaller than or equal to 60.')
      end

      if !@last_name.nil? && @last_name.to_s.length > 60
        invalid_properties.push('invalid value for "last_name", the character length must be smaller than or equal to 60.')
      end

      if !@id.nil? && @id.to_s.length > 40
        invalid_properties.push('invalid value for "id", the character length must be smaller than or equal to 40.')
      end

      if !@email.nil? && @email.to_s.length > 255
        invalid_properties.push('invalid value for "email", the character length must be smaller than or equal to 255.')
      end

      if !@nationality.nil? && @nationality.to_s.length > 2
        invalid_properties.push('invalid value for "nationality", the character length must be smaller than or equal to 2.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if !@type.nil? && @type.to_s.length > 32
      return false if !@status.nil? && @status.to_s.length > 32
      return false if !@phone.nil? && @phone.to_s.length > 15
      return false if !@first_name.nil? && @first_name.to_s.length > 60
      return false if !@last_name.nil? && @last_name.to_s.length > 60
      return false if !@id.nil? && @id.to_s.length > 40
      return false if !@email.nil? && @email.to_s.length > 255
      return false if !@nationality.nil? && @nationality.to_s.length > 2
      true
    end

    # Custom attribute writer method with validation
    # @param [Object] type Value to be assigned
    def type=(type)
      if !type.nil? && type.to_s.length > 32
        fail ArgumentError, 'invalid value for "type", the character length must be smaller than or equal to 32.'
      end

      @type = type
    end

    # Custom attribute writer method with validation
    # @param [Object] status Value to be assigned
    def status=(status)
      if !status.nil? && status.to_s.length > 32
        fail ArgumentError, 'invalid value for "status", the character length must be smaller than or equal to 32.'
      end

      @status = status
    end

    # Custom attribute writer method with validation
    # @param [Object] phone Value to be assigned
    def phone=(phone)
      if !phone.nil? && phone.to_s.length > 15
        fail ArgumentError, 'invalid value for "phone", the character length must be smaller than or equal to 15.'
      end

      @phone = phone
    end

    # Custom attribute writer method with validation
    # @param [Object] first_name Value to be assigned
    def first_name=(first_name)
      if !first_name.nil? && first_name.to_s.length > 60
        fail ArgumentError, 'invalid value for "first_name", the character length must be smaller than or equal to 60.'
      end

      @first_name = first_name
    end

    # Custom attribute writer method with validation
    # @param [Object] last_name Value to be assigned
    def last_name=(last_name)
      if !last_name.nil? && last_name.to_s.length > 60
        fail ArgumentError, 'invalid value for "last_name", the character length must be smaller than or equal to 60.'
      end

      @last_name = last_name
    end

    # Custom attribute writer method with validation
    # @param [Object] id Value to be assigned
    def id=(id)
      if !id.nil? && id.to_s.length > 40
        fail ArgumentError, 'invalid value for "id", the character length must be smaller than or equal to 40.'
      end

      @id = id
    end

    # Custom attribute writer method with validation
    # @param [Object] email Value to be assigned
    def email=(email)
      if !email.nil? && email.to_s.length > 255
        fail ArgumentError, 'invalid value for "email", the character length must be smaller than or equal to 255.'
      end

      @email = email
    end

    # Custom attribute writer method with validation
    # @param [Object] nationality Value to be assigned
    def nationality=(nationality)
      if !nationality.nil? && nationality.to_s.length > 2
        fail ArgumentError, 'invalid value for "nationality", the character length must be smaller than or equal to 2.'
      end

      @nationality = nationality
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          type == o.type &&
          status == o.status &&
          phone == o.phone &&
          first_name == o.first_name &&
          last_name == o.last_name &&
          id == o.id &&
          email == o.email &&
          nationality == o.nationality
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [type, status, phone, first_name, last_name, id, email, nationality].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = CyberSource.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
