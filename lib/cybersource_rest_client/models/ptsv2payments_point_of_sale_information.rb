=begin
#CyberSource Merged Spec

#All CyberSource API specs merged together. These are available at https://developer.cybersource.com/api/reference/api-reference.html

OpenAPI spec version: 0.0.1

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.2.3

=end

require 'date'

module CyberSource
  class Ptsv2paymentsPointOfSaleInformation
    # Identifier for the terminal at your retail location. You can define this value yourself, but consult the processor for requirements.  #### CyberSource through VisaNet A list of all possible values is stored in your CyberSource account. If terminal ID validation is enabled for your CyberSource account, the value you send for this field is validated against the list each time you include the field in a request. To enable or disable terminal ID validation, contact CyberSource Customer Support.  When you do not include this field in a request, CyberSource uses the default value that is defined in your CyberSource account.  #### FDC Nashville Global To have your account configured to support this field, contact CyberSource Customer Support. This value must be a value that FDC Nashville Global issued to you.  #### For Payouts This field is applicable for CyberSource through VisaNet.  #### GPX Identifier for the terminal at your retail location. A list of all possible values is stored in your account. If terminal ID validation is enabled for your account, the value you send for this field is validated against the list each time you include the field in a request. To enable or disable terminal ID validation, contact customer support.  When you do not include this field in a request, the default value that is defined in your account is used.  Optional for authorizations.  #### Used by **Authorization** Optional for the following processors. When you do not include this field in a request, the default value that is defined in your account is used.   - American Express Direct   - Credit Mutuel-CIC   - FDC Nashville Global   - SIX - Chase Paymentech Solutions: Optional field. If you include this field in your request, you must also include `pointOfSaleInformation.catLevel`. - FDMS Nashville: The default value that is defined in your account is used. - GPX - OmniPay Direct: Optional field.  For the following processors, this field is not used. - GPN - JCN Gateway - RBS WorldPay Atlanta - TSYS Acquiring Solutions - Worldpay VAP  #### Card Present reply Terminal identifier assigned by the acquirer. This value must be printed on the receipt. 
    attr_accessor :terminal_id

    # Terminal serial number assigned by the hardware manufacturer. This value is provided by the client software that is installed on the POS terminal.  This value is not forwarded to the processor. Instead, the value is forwarded to the reporting functionality.  #### Used by **Authorization and Credit** Optional. This field is supported only by client software that is installed on your POS terminals for the following processors: - American Express Direct - Credit Mutuel-CIC - FDC Nashville Global - OmniPay Direct - SIX 
    attr_accessor :terminal_serial_number

    # Identifier for an alternate terminal at your retail location. You define the value for this field.  This field is supported only for MasterCard transactions on FDC Nashville Global. Otherwise, this field is not used by all other processors. Use the `terminalId` field to identify the main terminal at your retail location. If your retail location has multiple terminals, use this `laneNumber` field to identify the terminal used for the transaction.  This field is a pass-through, which means that the value is not checked or modified in any way before sending it to the processor.  Optional field.  #### Card present reply messaging Identifier for an alternate terminal at your retail location. You defined the value for this field in the request message. This value must be printed on the receipt.  This field is supported only for MasterCard transactions on FDC Nashville Global. 
    attr_accessor :lane_number

    # Type of cardholder-activated terminal. Possible values:   - 1: Automated dispensing machine  - 2: Self-service terminal  - 3: Limited amount terminal  - 4: In-flight commerce (IFC) terminal  - 5: Radio frequency device  - 6: Mobile acceptance terminal  - 7: Electronic cash register  - 8: E-commerce device at your location  - 9: Terminal or cash register that uses a dialup connection to connect to the transaction processing network  #### Chase Paymentech Solutions Only values 1, 2, and 3 are supported.  Required if `pointOfSaleInformation.terminalID` is included in the request; otherwise, optional.  #### CyberSource through VisaNet Values 1 through 6 are supported on CyberSource through VisaNet, but some acquirers do not support all six values.  Optional field.  #### FDC Nashville Global Only values 7, 8, and 9 are supported.  Optional field for EMV transactions; otherwise, not used.  #### GPN Only values 6, 7, 8, and 9 are supported.  Required field.  #### JCN Gateway Only values 6, 7, 8, and 9 are supported.  Required field.  #### TSYS Acquiring Solutions Only value 6 is supported.  Required for transactions from mobile devices; otherwise, not used.  #### All other processors Not used.  Nonnegative integer. 
    attr_accessor :cat_level

    # Method of entering payment card information into the POS terminal. Possible values:   - `contact`: Read from direct contact with chip card.  - `contactless`: Read from a contactless interface using chip data.  - `keyed`: Manually keyed into POS terminal. This value is not supported on OmniPay Direct.  - `msd`: Read from a contactless interface using magnetic stripe data (MSD). This value is not supported on OmniPay Direct.  - `swiped`: Read from credit card magnetic stripe.  The `contact`, `contactless`, and `msd` values are supported only for EMV transactions.  #### Used by **Authorization** Required field.  #### Card Present Card present information about EMV applies only to credit card processing and PIN debit processing. All other card present information applies only to credit card processing.  #### PIN debit Required for a PIN debit purchase and a PIN debit credit request. 
    attr_accessor :entry_mode

    # POS terminal’s capability. Possible values:   - `1`: Terminal has a magnetic stripe reader only.  - `2`: Terminal has a magnetic stripe reader and manual entry capability.  - `3`: Terminal has manual entry capability only.  - `4`: Terminal can read chip cards.  - `5`: Terminal can read contactless chip cards; cannot use contact to read chip cards.  For an EMV transaction, the value of this field must be `4` or `5`.  #### PIN debit Required for PIN debit purchase and PIN debit credit request.  #### Used by **Authorization** Required for the following processors: - American Express Direct - Chase Paymentech Solutions - Credit Mutuel-CIC - FDC Nashville Global - FDMS Nashville - OmniPay Direct - SIX - Worldpay VAP  Optional for the following processors: - CyberSource through VisaNet - GPN - GPX - JCN Gateway - RBS WorldPay Atlanta - TSYS Acquiring Solutions 
    attr_accessor :terminal_capability

    # A one-digit code that identifies the capability of terminal to capture PINs.  This code does not necessarily mean that a PIN was entered or is included in this message.  POS terminal’s capability. Possible values: - `1`: Terminal has a magnetic stripe reader only. - `2`: Terminal has a magnetic stripe reader and manual entry capability. - `3`: Terminal has manual entry capability only. - `4`: Terminal can read chip cards.* - `5`: Terminal can read contactless chip cards.* * The values of 4 and 5 are supported only for EMV transactions.  For Payouts: This field is applicable for CtV. 
    attr_accessor :pin_entry_capability

    # Operating environment.  Possible values for all card types except Mastercard: - `0`: No terminal used or unknown environment. - `1`: On merchant premises, attended. - `2`: On merchant premises, unattended. Examples: oil, kiosks, self-checkout, mobile telephone, personal digital assistant (PDA). - `3`: Off merchant premises, attended. Examples: portable POS devices at trade shows, at service calls, or in taxis. - `4`: Off merchant premises, unattended. Examples: vending machines, home computer, mobile telephone, PDA. - `5`: On premises of cardholder, unattended. - `9`: Unknown delivery mode. - `S`: Electronic delivery of product. Examples: music, software, or eTickets that are downloaded over the internet. - `T`: Physical delivery of product. Examples: music or software that is delivered by mail or by a courier.  #### Possible values for Mastercard: - `2`: On merchant premises, unattended, or cardholder terminal. Examples: oil, kiosks, self-checkout, home computer, mobile telephone, personal digital assistant (PDA). Cardholder terminal is supported only for Mastercard transactions on CyberSource through VisaNet. - `4`: Off merchant premises, unattended, or cardholder terminal. Examples: vending machines, home computer, mobile telephone, PDA. Cardholder terminal is supported only for Mastercard transactions on CyberSource through VisaNet.  This field is supported only for American Express Direct and CyberSource through VisaNet. 
    attr_accessor :operating_environment

    attr_accessor :emv

    # Point-of-sale details for the transaction. This value is returned only for **American Express Direct**. CyberSource generates this value, which consists of a series of codes that identify terminal capability, security data, and specific conditions present at the time the transaction occurred. To comply with the CAPN requirements, this value must be included in all subsequent follow-on requests, such as captures and follow-on credits.  When you perform authorizations, captures, and credits through CyberSource, CyberSource passes this value from the authorization service to the subsequent services for you. However, when you perform authorizations through CyberSource and perform subsequent services through other financial institutions, you must ensure that your requests for captures and credits include this value.  For details, see `auth_pos_data` field description in [Credit Card Services Using the SCMP API.](https://apps.cybersource.com/library/documentation/dev_guides/CC_Svcs_SCMP_API/html/) 
    attr_accessor :amex_capn_data

    # Card’s track 1 and 2 data. For all processors except FDMS Nashville, this value consists of one of the following:   - Track 1 data  - Track 2 data  - Data for both tracks 1 and 2  For FDMS Nashville, this value consists of one of the following:  - Track 1 data  - Data for both tracks 1 and 2  Example: %B4111111111111111^SMITH/JOHN ^1612101976110000868000000?;4111111111111111=16121019761186800000?  #### Used by **Authorization** Required for Chase Paymentech Solutions, Credit Mutuel-CIC, CyberSource through VisaNet, FDC Nashville Global, JCN Gateway, OmniPay Direct, and SIX if `pointOfSaleInformation.entryMode` is equal to one of these values: - `contact` - `contactless` - `msd` - `swiped` Otherwise, this field not used.  Required for all other processors if `pointOfSaleInformation.entryMode=swiped`; otherwise, this field is not used.  #### GPX This field only supports transactions from the following card types: - Visa - Mastercard - AMEX - Discover - Diners - JCB - Union Pay International  #### PIN debit Track 2 data from the debit card. The sentinels are required. Required field for a PIN debit purchase and a PIN debit credit. 
    attr_accessor :track_data

    # When connectivity is unavailable, the client software that is installed on the POS terminal can store a transaction in its memory and send it for authorization when connectivity is restored. This value is provided by the client software that is installed on the POS terminal.  This value is not forwarded to the processor. Instead, the value is forwarded to the reporting functionality.  Possible values: - `Y`: Transaction was stored and then forwarded. - `N` (default): Transaction was not stored and then forwarded.  For authorizations and credits, this field is supported only on these processors: - American Express Direct - FDC Nashville Global - OmniPay Direct - SIX  Optional field. 
    attr_accessor :store_and_forward_indicator

    attr_accessor :cardholder_verification_method

    attr_accessor :terminal_input_capability

    # Indicates whether the terminal can capture the card.  Possible values: - `1`: Terminal can capture card. - `0`: Terminal cannot capture card.  For authorizations and credits, this field is supported only by these processors: - American Express Direct - Credit Mutuel-CIC - OmniPay Direct  Optional field. 
    attr_accessor :terminal_card_capture_capability

    # Indicates whether the terminal can print or display messages.  Possible values: - 1: Neither - 2: Print only - 3: Display only - 4: Print and display  This field is supported for authorizations and credits only on the following processors: - American Express Direct - Credit Mutuel-CIC - FDC Nashville Global - OmniPay Direct - SIX  Optional field. 
    attr_accessor :terminal_output_capability

    # Maximum PIN length that the terminal can capture.  Possible values: -  0: No PIN capture capability -  1: PIN capture capability unknown -  4: Four characters -  5: Five characters -  6: Six characters -  7: Seven characters -  8: Eight characters -  9: Nine characters - 10: Ten characters - 11: Eleven characters - 12: Twelve characters  This field is supported for authorizations and credits only on the following processors: - American Express Direct - Credit Mutuel-CIC - OmniPay Direct - SIX  Required field for authorization or credit of PIN transactions. 
    attr_accessor :terminal_pin_capability

    # Value created by the client software that uniquely identifies the POS device. This value is provided by the client software that is installed on the POS terminal.  CyberSource does not forward this value to the processor. Instead, the value is forwarded to the CyberSource reporting functionality.  This field is supported only on American Express Direct, FDC Nashville Global, and SIX. 
    attr_accessor :device_id

    # Format that is used to encode the PIN block. This value is provided by the client software that is installed on the POS terminal.  Possible values: - `0`: ISO 9564 format 0 - `1`: ISO 9564 format 1 - `2`: ISO 9564 format 2 - `3`: ISO 9564 format 3  #### Used by **Authorization, PIN Debit** - Required when the cardholder enters a PIN and the card cannot verify the PIN, which means that the issuer must verify the PIN. - Required for PIN debit credit or PIN debit purchase.  For authorizations, this field is supported only on these processors: - American Express Direct - Credit Mutuel-CIC - FDC Nashville Global - OmniPay Direct - SIX  This field is also supported by processors that support chip and online PIN transactions. The following table lists the EMV Cards and Cardholder Verification Methods (CVMs) that these processors support:  | Processor | Chip and Offline PIN | Chip and Online PIN | Chip and Signature | | --- | --- | --- | --- | | American Express Direct | Yes | Yes | Yes | | Chase Paymentech Solutions | No | No | Yes | | Credit Mutuel-CIC | Yes | Yes | Yes | | CyberSource through VisaNet | Yes | No | Yes | | FDC Nashville Global | Yes | Yes | Yes | | GPN | No | No | Yes | | OmniPay Direct | Yes | No | Yes | | SIX | Yes | Yes | Yes |  #### GPX For chip and online PIN transactions for authorization, GPX supports the following EMV Cards and Cardholder Verification Methods (CVMs): - Chip and Offline PIN - Chip and Signature  For PIN Debit Purchase and Credit Service transactions, GPX supports the following EMV Cards and Cardholder Verification Methods (CVMs): - Chip and Online PIN 
    attr_accessor :pin_block_encoding_format

    # Encrypted PIN.  This value is provided by the client software that is installed on the POS terminal.  #### Used by **Authorization, PIN Debit** Required when the cardholder enters a PIN and the card cannot verify the PIN, which means that the issuer must verify the PIN. Required for PIN debit credit or PIN debit purchase. Required for online PIN transactions.  For authorizations, this field is supported only on these processors: - American Express Direct - Credit Mutuel-CIC - FDC Nashville Global - OmniPay Direct - SIX  This field is also used by processors that support chip and online PIN transactions. The following table lists the EMV Cards and Cardholder Verification Methods (CVMs) that these processors support:  | Processor | Chip and Offline PIN | Chip and Online PIN | Chip and Signature | | --- | --- | --- | --- | | American Express Direct | Yes | Yes | Yes | | Chase Paymentech Solutions | No | No | Yes | | Credit Mutuel-CIC | Yes | Yes | Yes | | CyberSource through VisaNet | Yes | No | Yes | | FDC Nashville Global | Yes | Yes | Yes | | GPN | No | No | Yes | | OmniPay Direct | Yes | No | Yes | | SIX | Yes | Yes | Yes | 
    attr_accessor :encrypted_pin

    # Combination of the device's unique identifier and a transaction counter that is used in the process of decrypting the encrypted PIN. The entity that injected the PIN encryption keys into the terminal decrypts the encrypted PIN and creates this value.  For all terminals that are using derived unique key per transaction (DUKPT) encryption, this is generated as a single number within the terminal.  #### Used by **Authorization, PIN Debit** - Required when the cardholder enters a PIN and the card cannot verify the PIN, which means that the issuer must verify the PIN. - Required for PIN debit credit or PIN debit purchase. - Required for online PIN transactions  For authorizations, this field is supported only on these processors: - American Express Direct - Credit Mutuel-CIC - FDC Nashville Global - OmniPay Direct - SIX  This field is also used by processors that support chip and online PIN transactions. The following table lists the EMV Cards and Cardholder Verification Methods (CVMs) that these processors support:  | Processor | Chip and Offline PIN | Chip and Online PIN | Chip and Signature | | --- | --- | --- | --- | | American Express Direct | Yes | Yes | Yes | | Chase Paymentech Solutions | No | No | Yes | | Credit Mutuel-CIC | Yes | Yes | Yes | | CyberSource through VisaNet | Yes | No | Yes | | FDC Nashville Global | Yes | Yes | Yes | | GPN | No | No | Yes | | OmniPay Direct | Yes | No | Yes | | SIX | Yes | Yes | Yes | 
    attr_accessor :encrypted_key_serial_number

    # Version of the software installed on the POS terminal. This value is provided by the client software that is installed on the POS terminal.  CyberSource does not forward this value to the processor. Instead, the value is forwarded to the CyberSource reporting functionality.  This field is supported only on American Express Direct, FDC Nashville Global, and SIX.  For authorizations and credits, this field is supported only on these processors: - American Express Direct - Credit Mutuel-CIC - FDC Nashville Global - OmniPay Direct - SIX 
    attr_accessor :partner_sdk_version

    # This 32 byte length-maximum EBCDIC-K value is used to identify which chip application was performed between the terminal and the chip product. The included values are the Application Identifier (AID) and the Dedicated File (DF) name. It is available to early- or full-option VSDC issuers. Only single byte Katakana characters that can map to the EBCDIC-K table expected in the name. 
    attr_accessor :emv_application_identifier_and_dedicated_file_name

    # Flag that indicates whether the terminal is compliant with standards mandated by the Reserve Bank of India for card-present domestic transactions in India.  Format: - First character indicates whether the terminal supports terminal line encryption (TLE). Possible values:   - 1: Not certified   - 2: Certified - Second character indicates whether the terminal supports Unique Key Per Transaction (UKPT) and Derived Unique Key Per Transaction (DUKPT). Possible values:   - 1: Not certified   - 2: Certified  **Example** `21` indicates that the terminal supports TLE but does not support UKPT/DUKPT.  You and the terminal vendors are responsible for terminal certification. If you have questions, contact your acquirer.  This field is supported only for Mastercard transactions on CyberSource through VisaNet.  **Note** On CyberSource through VisaNet, the value for this field corresponds to the following data in the TC 33 capture file: - Record: CP01 TCR6 - Position: 92-93 - Field: Mastercard Terminal Compliance Indicator  The TC 33 Capture file contains information about the purchases and refunds that a merchant submits to CyberSource. CyberSource through VisaNet creates the TC 33 Capture file at the end of the day and sends it to the merchant’s acquirer, who uses this information to facilitate end-of-day clearing processing with payment networks.  #### Used by **Authorization** Required for card-present transactions in India. Otherwise, not used. 
    attr_accessor :terminal_compliance

    # Type of mPOS device. Possible values: - 0: Dongle - 1: Phone or tablet  This optional field is supported only for Mastercard transactions on CyberSource through VisaNet.  The value for this field corresponds to the following data in the TC 33 capture file: - Record: CP01 TCR6 - Position: 141 - Field: Mastercard mPOS Transaction  The TC 33 Capture file contains information about the purchases and refunds that a merchant submits to CyberSource. CyberSource through VisaNet creates the TC 33 Capture file at the end of the day and sends it to the merchant’s acquirer, who uses this information to facilitate end-of-day clearing processing with payment networks. 
    attr_accessor :is_dedicated_hardware_terminal

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'terminal_id' => :'terminalId',
        :'terminal_serial_number' => :'terminalSerialNumber',
        :'lane_number' => :'laneNumber',
        :'cat_level' => :'catLevel',
        :'entry_mode' => :'entryMode',
        :'terminal_capability' => :'terminalCapability',
        :'pin_entry_capability' => :'pinEntryCapability',
        :'operating_environment' => :'operatingEnvironment',
        :'emv' => :'emv',
        :'amex_capn_data' => :'amexCapnData',
        :'track_data' => :'trackData',
        :'store_and_forward_indicator' => :'storeAndForwardIndicator',
        :'cardholder_verification_method' => :'cardholderVerificationMethod',
        :'terminal_input_capability' => :'terminalInputCapability',
        :'terminal_card_capture_capability' => :'terminalCardCaptureCapability',
        :'terminal_output_capability' => :'terminalOutputCapability',
        :'terminal_pin_capability' => :'terminalPinCapability',
        :'device_id' => :'deviceId',
        :'pin_block_encoding_format' => :'pinBlockEncodingFormat',
        :'encrypted_pin' => :'encryptedPin',
        :'encrypted_key_serial_number' => :'encryptedKeySerialNumber',
        :'partner_sdk_version' => :'partnerSdkVersion',
        :'emv_application_identifier_and_dedicated_file_name' => :'emvApplicationIdentifierAndDedicatedFileName',
        :'terminal_compliance' => :'terminalCompliance',
        :'is_dedicated_hardware_terminal' => :'isDedicatedHardwareTerminal'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'terminal_id' => :'String',
        :'terminal_serial_number' => :'String',
        :'lane_number' => :'String',
        :'cat_level' => :'Integer',
        :'entry_mode' => :'String',
        :'terminal_capability' => :'Integer',
        :'pin_entry_capability' => :'Integer',
        :'operating_environment' => :'String',
        :'emv' => :'Ptsv2paymentsPointOfSaleInformationEmv',
        :'amex_capn_data' => :'String',
        :'track_data' => :'String',
        :'store_and_forward_indicator' => :'String',
        :'cardholder_verification_method' => :'Array<String>',
        :'terminal_input_capability' => :'Array<String>',
        :'terminal_card_capture_capability' => :'String',
        :'terminal_output_capability' => :'String',
        :'terminal_pin_capability' => :'Integer',
        :'device_id' => :'String',
        :'pin_block_encoding_format' => :'Integer',
        :'encrypted_pin' => :'String',
        :'encrypted_key_serial_number' => :'String',
        :'partner_sdk_version' => :'String',
        :'emv_application_identifier_and_dedicated_file_name' => :'String',
        :'terminal_compliance' => :'String',
        :'is_dedicated_hardware_terminal' => :'String'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      if attributes.has_key?(:'terminalId')
        self.terminal_id = attributes[:'terminalId']
      end

      if attributes.has_key?(:'terminalSerialNumber')
        self.terminal_serial_number = attributes[:'terminalSerialNumber']
      end

      if attributes.has_key?(:'laneNumber')
        self.lane_number = attributes[:'laneNumber']
      end

      if attributes.has_key?(:'catLevel')
        self.cat_level = attributes[:'catLevel']
      end

      if attributes.has_key?(:'entryMode')
        self.entry_mode = attributes[:'entryMode']
      end

      if attributes.has_key?(:'terminalCapability')
        self.terminal_capability = attributes[:'terminalCapability']
      end

      if attributes.has_key?(:'pinEntryCapability')
        self.pin_entry_capability = attributes[:'pinEntryCapability']
      end

      if attributes.has_key?(:'operatingEnvironment')
        self.operating_environment = attributes[:'operatingEnvironment']
      end

      if attributes.has_key?(:'emv')
        self.emv = attributes[:'emv']
      end

      if attributes.has_key?(:'amexCapnData')
        self.amex_capn_data = attributes[:'amexCapnData']
      end

      if attributes.has_key?(:'trackData')
        self.track_data = attributes[:'trackData']
      end

      if attributes.has_key?(:'storeAndForwardIndicator')
        self.store_and_forward_indicator = attributes[:'storeAndForwardIndicator']
      end

      if attributes.has_key?(:'cardholderVerificationMethod')
        if (value = attributes[:'cardholderVerificationMethod']).is_a?(Array)
          self.cardholder_verification_method = value
        end
      end

      if attributes.has_key?(:'terminalInputCapability')
        if (value = attributes[:'terminalInputCapability']).is_a?(Array)
          self.terminal_input_capability = value
        end
      end

      if attributes.has_key?(:'terminalCardCaptureCapability')
        self.terminal_card_capture_capability = attributes[:'terminalCardCaptureCapability']
      end

      if attributes.has_key?(:'terminalOutputCapability')
        self.terminal_output_capability = attributes[:'terminalOutputCapability']
      end

      if attributes.has_key?(:'terminalPinCapability')
        self.terminal_pin_capability = attributes[:'terminalPinCapability']
      end

      if attributes.has_key?(:'deviceId')
        self.device_id = attributes[:'deviceId']
      end

      if attributes.has_key?(:'pinBlockEncodingFormat')
        self.pin_block_encoding_format = attributes[:'pinBlockEncodingFormat']
      end

      if attributes.has_key?(:'encryptedPin')
        self.encrypted_pin = attributes[:'encryptedPin']
      end

      if attributes.has_key?(:'encryptedKeySerialNumber')
        self.encrypted_key_serial_number = attributes[:'encryptedKeySerialNumber']
      end

      if attributes.has_key?(:'partnerSdkVersion')
        self.partner_sdk_version = attributes[:'partnerSdkVersion']
      end

      if attributes.has_key?(:'emvApplicationIdentifierAndDedicatedFileName')
        self.emv_application_identifier_and_dedicated_file_name = attributes[:'emvApplicationIdentifierAndDedicatedFileName']
      end

      if attributes.has_key?(:'terminalCompliance')
        self.terminal_compliance = attributes[:'terminalCompliance']
      end

      if attributes.has_key?(:'isDedicatedHardwareTerminal')
        self.is_dedicated_hardware_terminal = attributes[:'isDedicatedHardwareTerminal']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if !@terminal_id.nil? && @terminal_id.to_s.length > 8
        invalid_properties.push('invalid value for "terminal_id", the character length must be smaller than or equal to 8.')
      end

      if !@terminal_serial_number.nil? && @terminal_serial_number.to_s.length > 32
        invalid_properties.push('invalid value for "terminal_serial_number", the character length must be smaller than or equal to 32.')
      end

      if !@lane_number.nil? && @lane_number.to_s.length > 8
        invalid_properties.push('invalid value for "lane_number", the character length must be smaller than or equal to 8.')
      end

      if !@cat_level.nil? && @cat_level > 9
        invalid_properties.push('invalid value for "cat_level", must be smaller than or equal to 9.')
      end

      if !@cat_level.nil? && @cat_level < 1
        invalid_properties.push('invalid value for "cat_level", must be greater than or equal to 1.')
      end

      if !@entry_mode.nil? && @entry_mode.to_s.length > 11
        invalid_properties.push('invalid value for "entry_mode", the character length must be smaller than or equal to 11.')
      end

      if !@terminal_capability.nil? && @terminal_capability > 5
        invalid_properties.push('invalid value for "terminal_capability", must be smaller than or equal to 5.')
      end

      if !@terminal_capability.nil? && @terminal_capability < 1
        invalid_properties.push('invalid value for "terminal_capability", must be greater than or equal to 1.')
      end

      if !@pin_entry_capability.nil? && @pin_entry_capability > 1
        invalid_properties.push('invalid value for "pin_entry_capability", must be smaller than or equal to 1.')
      end

      if !@pin_entry_capability.nil? && @pin_entry_capability < 1
        invalid_properties.push('invalid value for "pin_entry_capability", must be greater than or equal to 1.')
      end

      if !@operating_environment.nil? && @operating_environment.to_s.length > 1
        invalid_properties.push('invalid value for "operating_environment", the character length must be smaller than or equal to 1.')
      end

      if !@amex_capn_data.nil? && @amex_capn_data.to_s.length > 15
        invalid_properties.push('invalid value for "amex_capn_data", the character length must be smaller than or equal to 15.')
      end

      if !@store_and_forward_indicator.nil? && @store_and_forward_indicator.to_s.length > 1
        invalid_properties.push('invalid value for "store_and_forward_indicator", the character length must be smaller than or equal to 1.')
      end

      if !@terminal_card_capture_capability.nil? && @terminal_card_capture_capability.to_s.length > 1
        invalid_properties.push('invalid value for "terminal_card_capture_capability", the character length must be smaller than or equal to 1.')
      end

      if !@terminal_output_capability.nil? && @terminal_output_capability.to_s.length > 1
        invalid_properties.push('invalid value for "terminal_output_capability", the character length must be smaller than or equal to 1.')
      end

      if !@device_id.nil? && @device_id.to_s.length > 32
        invalid_properties.push('invalid value for "device_id", the character length must be smaller than or equal to 32.')
      end

      if !@pin_block_encoding_format.nil? && @pin_block_encoding_format > 9
        invalid_properties.push('invalid value for "pin_block_encoding_format", must be smaller than or equal to 9.')
      end

      if !@encrypted_pin.nil? && @encrypted_pin.to_s.length > 16
        invalid_properties.push('invalid value for "encrypted_pin", the character length must be smaller than or equal to 16.')
      end

      if !@encrypted_key_serial_number.nil? && @encrypted_key_serial_number.to_s.length > 20
        invalid_properties.push('invalid value for "encrypted_key_serial_number", the character length must be smaller than or equal to 20.')
      end

      if !@partner_sdk_version.nil? && @partner_sdk_version.to_s.length > 32
        invalid_properties.push('invalid value for "partner_sdk_version", the character length must be smaller than or equal to 32.')
      end

      if !@emv_application_identifier_and_dedicated_file_name.nil? && @emv_application_identifier_and_dedicated_file_name.to_s.length > 32
        invalid_properties.push('invalid value for "emv_application_identifier_and_dedicated_file_name", the character length must be smaller than or equal to 32.')
      end

      if !@terminal_compliance.nil? && @terminal_compliance.to_s.length > 2
        invalid_properties.push('invalid value for "terminal_compliance", the character length must be smaller than or equal to 2.')
      end

      if !@is_dedicated_hardware_terminal.nil? && @is_dedicated_hardware_terminal.to_s.length > 1
        invalid_properties.push('invalid value for "is_dedicated_hardware_terminal", the character length must be smaller than or equal to 1.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if !@terminal_id.nil? && @terminal_id.to_s.length > 8
      return false if !@terminal_serial_number.nil? && @terminal_serial_number.to_s.length > 32
      return false if !@lane_number.nil? && @lane_number.to_s.length > 8
      return false if !@cat_level.nil? && @cat_level > 9
      return false if !@cat_level.nil? && @cat_level < 1
      return false if !@entry_mode.nil? && @entry_mode.to_s.length > 11
      return false if !@terminal_capability.nil? && @terminal_capability > 5
      return false if !@terminal_capability.nil? && @terminal_capability < 1
      return false if !@pin_entry_capability.nil? && @pin_entry_capability > 1
      return false if !@pin_entry_capability.nil? && @pin_entry_capability < 1
      return false if !@operating_environment.nil? && @operating_environment.to_s.length > 1
      return false if !@amex_capn_data.nil? && @amex_capn_data.to_s.length > 15
      return false if !@store_and_forward_indicator.nil? && @store_and_forward_indicator.to_s.length > 1
      return false if !@terminal_card_capture_capability.nil? && @terminal_card_capture_capability.to_s.length > 1
      return false if !@terminal_output_capability.nil? && @terminal_output_capability.to_s.length > 1
      return false if !@device_id.nil? && @device_id.to_s.length > 32
      return false if !@pin_block_encoding_format.nil? && @pin_block_encoding_format > 9
      return false if !@encrypted_pin.nil? && @encrypted_pin.to_s.length > 16
      return false if !@encrypted_key_serial_number.nil? && @encrypted_key_serial_number.to_s.length > 20
      return false if !@partner_sdk_version.nil? && @partner_sdk_version.to_s.length > 32
      return false if !@emv_application_identifier_and_dedicated_file_name.nil? && @emv_application_identifier_and_dedicated_file_name.to_s.length > 32
      return false if !@terminal_compliance.nil? && @terminal_compliance.to_s.length > 2
      return false if !@is_dedicated_hardware_terminal.nil? && @is_dedicated_hardware_terminal.to_s.length > 1
      true
    end

    # Custom attribute writer method with validation
    # @param [Object] terminal_id Value to be assigned
    def terminal_id=(terminal_id)
      if !terminal_id.nil? && terminal_id.to_s.length > 8
        fail ArgumentError, 'invalid value for "terminal_id", the character length must be smaller than or equal to 8.'
      end

      @terminal_id = terminal_id
    end

    # Custom attribute writer method with validation
    # @param [Object] terminal_serial_number Value to be assigned
    def terminal_serial_number=(terminal_serial_number)
      if !terminal_serial_number.nil? && terminal_serial_number.to_s.length > 32
        fail ArgumentError, 'invalid value for "terminal_serial_number", the character length must be smaller than or equal to 32.'
      end

      @terminal_serial_number = terminal_serial_number
    end

    # Custom attribute writer method with validation
    # @param [Object] lane_number Value to be assigned
    def lane_number=(lane_number)
      if !lane_number.nil? && lane_number.to_s.length > 8
        fail ArgumentError, 'invalid value for "lane_number", the character length must be smaller than or equal to 8.'
      end

      @lane_number = lane_number
    end

    # Custom attribute writer method with validation
    # @param [Object] cat_level Value to be assigned
    def cat_level=(cat_level)
      if !cat_level.nil? && cat_level > 9
        fail ArgumentError, 'invalid value for "cat_level", must be smaller than or equal to 9.'
      end

      if !cat_level.nil? && cat_level < 1
        fail ArgumentError, 'invalid value for "cat_level", must be greater than or equal to 1.'
      end

      @cat_level = cat_level
    end

    # Custom attribute writer method with validation
    # @param [Object] entry_mode Value to be assigned
    def entry_mode=(entry_mode)
      if !entry_mode.nil? && entry_mode.to_s.length > 11
        fail ArgumentError, 'invalid value for "entry_mode", the character length must be smaller than or equal to 11.'
      end

      @entry_mode = entry_mode
    end

    # Custom attribute writer method with validation
    # @param [Object] terminal_capability Value to be assigned
    def terminal_capability=(terminal_capability)
      if !terminal_capability.nil? && terminal_capability > 5
        fail ArgumentError, 'invalid value for "terminal_capability", must be smaller than or equal to 5.'
      end

      if !terminal_capability.nil? && terminal_capability < 1
        fail ArgumentError, 'invalid value for "terminal_capability", must be greater than or equal to 1.'
      end

      @terminal_capability = terminal_capability
    end

    # Custom attribute writer method with validation
    # @param [Object] pin_entry_capability Value to be assigned
    def pin_entry_capability=(pin_entry_capability)
      if !pin_entry_capability.nil? && pin_entry_capability > 1
        fail ArgumentError, 'invalid value for "pin_entry_capability", must be smaller than or equal to 1.'
      end

      if !pin_entry_capability.nil? && pin_entry_capability < 1
        fail ArgumentError, 'invalid value for "pin_entry_capability", must be greater than or equal to 1.'
      end

      @pin_entry_capability = pin_entry_capability
    end

    # Custom attribute writer method with validation
    # @param [Object] operating_environment Value to be assigned
    def operating_environment=(operating_environment)
      if !operating_environment.nil? && operating_environment.to_s.length > 1
        fail ArgumentError, 'invalid value for "operating_environment", the character length must be smaller than or equal to 1.'
      end

      @operating_environment = operating_environment
    end

    # Custom attribute writer method with validation
    # @param [Object] amex_capn_data Value to be assigned
    def amex_capn_data=(amex_capn_data)
      if !amex_capn_data.nil? && amex_capn_data.to_s.length > 15
        fail ArgumentError, 'invalid value for "amex_capn_data", the character length must be smaller than or equal to 15.'
      end

      @amex_capn_data = amex_capn_data
    end

    # Custom attribute writer method with validation
    # @param [Object] store_and_forward_indicator Value to be assigned
    def store_and_forward_indicator=(store_and_forward_indicator)
      if !store_and_forward_indicator.nil? && store_and_forward_indicator.to_s.length > 1
        fail ArgumentError, 'invalid value for "store_and_forward_indicator", the character length must be smaller than or equal to 1.'
      end

      @store_and_forward_indicator = store_and_forward_indicator
    end

    # Custom attribute writer method with validation
    # @param [Object] terminal_card_capture_capability Value to be assigned
    def terminal_card_capture_capability=(terminal_card_capture_capability)
      if !terminal_card_capture_capability.nil? && terminal_card_capture_capability.to_s.length > 1
        fail ArgumentError, 'invalid value for "terminal_card_capture_capability", the character length must be smaller than or equal to 1.'
      end

      @terminal_card_capture_capability = terminal_card_capture_capability
    end

    # Custom attribute writer method with validation
    # @param [Object] terminal_output_capability Value to be assigned
    def terminal_output_capability=(terminal_output_capability)
      if !terminal_output_capability.nil? && terminal_output_capability.to_s.length > 1
        fail ArgumentError, 'invalid value for "terminal_output_capability", the character length must be smaller than or equal to 1.'
      end

      @terminal_output_capability = terminal_output_capability
    end

    # Custom attribute writer method with validation
    # @param [Object] device_id Value to be assigned
    def device_id=(device_id)
      if !device_id.nil? && device_id.to_s.length > 32
        fail ArgumentError, 'invalid value for "device_id", the character length must be smaller than or equal to 32.'
      end

      @device_id = device_id
    end

    # Custom attribute writer method with validation
    # @param [Object] pin_block_encoding_format Value to be assigned
    def pin_block_encoding_format=(pin_block_encoding_format)
      if !pin_block_encoding_format.nil? && pin_block_encoding_format > 9
        fail ArgumentError, 'invalid value for "pin_block_encoding_format", must be smaller than or equal to 9.'
      end

      @pin_block_encoding_format = pin_block_encoding_format
    end

    # Custom attribute writer method with validation
    # @param [Object] encrypted_pin Value to be assigned
    def encrypted_pin=(encrypted_pin)
      if !encrypted_pin.nil? && encrypted_pin.to_s.length > 16
        fail ArgumentError, 'invalid value for "encrypted_pin", the character length must be smaller than or equal to 16.'
      end

      @encrypted_pin = encrypted_pin
    end

    # Custom attribute writer method with validation
    # @param [Object] encrypted_key_serial_number Value to be assigned
    def encrypted_key_serial_number=(encrypted_key_serial_number)
      if !encrypted_key_serial_number.nil? && encrypted_key_serial_number.to_s.length > 20
        fail ArgumentError, 'invalid value for "encrypted_key_serial_number", the character length must be smaller than or equal to 20.'
      end

      @encrypted_key_serial_number = encrypted_key_serial_number
    end

    # Custom attribute writer method with validation
    # @param [Object] partner_sdk_version Value to be assigned
    def partner_sdk_version=(partner_sdk_version)
      if !partner_sdk_version.nil? && partner_sdk_version.to_s.length > 32
        fail ArgumentError, 'invalid value for "partner_sdk_version", the character length must be smaller than or equal to 32.'
      end

      @partner_sdk_version = partner_sdk_version
    end

    # Custom attribute writer method with validation
    # @param [Object] emv_application_identifier_and_dedicated_file_name Value to be assigned
    def emv_application_identifier_and_dedicated_file_name=(emv_application_identifier_and_dedicated_file_name)
      if !emv_application_identifier_and_dedicated_file_name.nil? && emv_application_identifier_and_dedicated_file_name.to_s.length > 32
        fail ArgumentError, 'invalid value for "emv_application_identifier_and_dedicated_file_name", the character length must be smaller than or equal to 32.'
      end

      @emv_application_identifier_and_dedicated_file_name = emv_application_identifier_and_dedicated_file_name
    end

    # Custom attribute writer method with validation
    # @param [Object] terminal_compliance Value to be assigned
    def terminal_compliance=(terminal_compliance)
      if !terminal_compliance.nil? && terminal_compliance.to_s.length > 2
        fail ArgumentError, 'invalid value for "terminal_compliance", the character length must be smaller than or equal to 2.'
      end

      @terminal_compliance = terminal_compliance
    end

    # Custom attribute writer method with validation
    # @param [Object] is_dedicated_hardware_terminal Value to be assigned
    def is_dedicated_hardware_terminal=(is_dedicated_hardware_terminal)
      if !is_dedicated_hardware_terminal.nil? && is_dedicated_hardware_terminal.to_s.length > 1
        fail ArgumentError, 'invalid value for "is_dedicated_hardware_terminal", the character length must be smaller than or equal to 1.'
      end

      @is_dedicated_hardware_terminal = is_dedicated_hardware_terminal
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          terminal_id == o.terminal_id &&
          terminal_serial_number == o.terminal_serial_number &&
          lane_number == o.lane_number &&
          cat_level == o.cat_level &&
          entry_mode == o.entry_mode &&
          terminal_capability == o.terminal_capability &&
          pin_entry_capability == o.pin_entry_capability &&
          operating_environment == o.operating_environment &&
          emv == o.emv &&
          amex_capn_data == o.amex_capn_data &&
          track_data == o.track_data &&
          store_and_forward_indicator == o.store_and_forward_indicator &&
          cardholder_verification_method == o.cardholder_verification_method &&
          terminal_input_capability == o.terminal_input_capability &&
          terminal_card_capture_capability == o.terminal_card_capture_capability &&
          terminal_output_capability == o.terminal_output_capability &&
          terminal_pin_capability == o.terminal_pin_capability &&
          device_id == o.device_id &&
          pin_block_encoding_format == o.pin_block_encoding_format &&
          encrypted_pin == o.encrypted_pin &&
          encrypted_key_serial_number == o.encrypted_key_serial_number &&
          partner_sdk_version == o.partner_sdk_version &&
          emv_application_identifier_and_dedicated_file_name == o.emv_application_identifier_and_dedicated_file_name &&
          terminal_compliance == o.terminal_compliance &&
          is_dedicated_hardware_terminal == o.is_dedicated_hardware_terminal
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [terminal_id, terminal_serial_number, lane_number, cat_level, entry_mode, terminal_capability, pin_entry_capability, operating_environment, emv, amex_capn_data, track_data, store_and_forward_indicator, cardholder_verification_method, terminal_input_capability, terminal_card_capture_capability, terminal_output_capability, terminal_pin_capability, device_id, pin_block_encoding_format, encrypted_pin, encrypted_key_serial_number, partner_sdk_version, emv_application_identifier_and_dedicated_file_name, terminal_compliance, is_dedicated_hardware_terminal].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = CyberSource.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
