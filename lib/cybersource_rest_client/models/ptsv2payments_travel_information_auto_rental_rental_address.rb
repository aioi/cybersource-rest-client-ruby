=begin
#CyberSource Merged Spec

#All CyberSource API specs merged together. These are available at https://developer.cybersource.com/api/reference/api-reference.html

OpenAPI spec version: 0.0.1

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.2.3

=end

require 'date'

module CyberSource
  class Ptsv2paymentsTravelInformationAutoRentalRentalAddress
    # City in which the auto was rented.  For authorizations, this field is supported for Visa, MasterCard, and American Express.  For captures, this field is supported only for American Express.  For all other card types, this field is ignored. 
    attr_accessor :city

    # State in which the auto was rented. Use the [State, Province, and Territory Codes for the United States and Canada](https://developer.cybersource.com/library/documentation/sbc/quickref/states_and_provinces.pdf). 
    attr_accessor :state

    # Country where the auto was rented. Use the [ISO Standard Country Codes.](https://developer.cybersource.com/library/documentation/sbc/quickref/countries_alpha_list.pdf) This field is supported only for American Express. 
    attr_accessor :country

    # The agency code, address, phone number, etc., used to identify the location where the vehicle was rented. 
    attr_accessor :location_id

    # Address from where the vehicle was rented. 
    attr_accessor :address1

    # Address from where the vehicle was rented. 
    attr_accessor :address2

    # This field contains the location where a taxi passenger was picked up or where an auto rental vehicle was picked up. In most cases, this is the rental agency's business name that appears on the storefront and/or customer receipts, commonly referred to as the DBA (Doing Business As) name. However, if the vehicle was picked up at another location (e.g., a hotel,auto dealership, repair shop, etc.), the name of that location should be used. This entry must be easily recognized by the Cardmember to avoid unnecessary inquiries. If the name is more than 38  characters, use proper and meaningful abbreviation, when possible. 
    attr_accessor :location

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'city' => :'city',
        :'state' => :'state',
        :'country' => :'country',
        :'location_id' => :'locationId',
        :'address1' => :'address1',
        :'address2' => :'address2',
        :'location' => :'location'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'city' => :'String',
        :'state' => :'String',
        :'country' => :'String',
        :'location_id' => :'String',
        :'address1' => :'String',
        :'address2' => :'String',
        :'location' => :'String'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      if attributes.has_key?(:'city')
        self.city = attributes[:'city']
      end

      if attributes.has_key?(:'state')
        self.state = attributes[:'state']
      end

      if attributes.has_key?(:'country')
        self.country = attributes[:'country']
      end

      if attributes.has_key?(:'locationId')
        self.location_id = attributes[:'locationId']
      end

      if attributes.has_key?(:'address1')
        self.address1 = attributes[:'address1']
      end

      if attributes.has_key?(:'address2')
        self.address2 = attributes[:'address2']
      end

      if attributes.has_key?(:'location')
        self.location = attributes[:'location']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if !@city.nil? && @city.to_s.length > 25
        invalid_properties.push('invalid value for "city", the character length must be smaller than or equal to 25.')
      end

      if !@state.nil? && @state.to_s.length > 3
        invalid_properties.push('invalid value for "state", the character length must be smaller than or equal to 3.')
      end

      if !@country.nil? && @country.to_s.length > 3
        invalid_properties.push('invalid value for "country", the character length must be smaller than or equal to 3.')
      end

      if !@location_id.nil? && @location_id.to_s.length > 10
        invalid_properties.push('invalid value for "location_id", the character length must be smaller than or equal to 10.')
      end

      if !@address1.nil? && @address1.to_s.length > 13
        invalid_properties.push('invalid value for "address1", the character length must be smaller than or equal to 13.')
      end

      if !@address2.nil? && @address2.to_s.length > 13
        invalid_properties.push('invalid value for "address2", the character length must be smaller than or equal to 13.')
      end

      if !@location.nil? && @location.to_s.length > 38
        invalid_properties.push('invalid value for "location", the character length must be smaller than or equal to 38.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if !@city.nil? && @city.to_s.length > 25
      return false if !@state.nil? && @state.to_s.length > 3
      return false if !@country.nil? && @country.to_s.length > 3
      return false if !@location_id.nil? && @location_id.to_s.length > 10
      return false if !@address1.nil? && @address1.to_s.length > 13
      return false if !@address2.nil? && @address2.to_s.length > 13
      return false if !@location.nil? && @location.to_s.length > 38
      true
    end

    # Custom attribute writer method with validation
    # @param [Object] city Value to be assigned
    def city=(city)
      if !city.nil? && city.to_s.length > 25
        fail ArgumentError, 'invalid value for "city", the character length must be smaller than or equal to 25.'
      end

      @city = city
    end

    # Custom attribute writer method with validation
    # @param [Object] state Value to be assigned
    def state=(state)
      if !state.nil? && state.to_s.length > 3
        fail ArgumentError, 'invalid value for "state", the character length must be smaller than or equal to 3.'
      end

      @state = state
    end

    # Custom attribute writer method with validation
    # @param [Object] country Value to be assigned
    def country=(country)
      if !country.nil? && country.to_s.length > 3
        fail ArgumentError, 'invalid value for "country", the character length must be smaller than or equal to 3.'
      end

      @country = country
    end

    # Custom attribute writer method with validation
    # @param [Object] location_id Value to be assigned
    def location_id=(location_id)
      if !location_id.nil? && location_id.to_s.length > 10
        fail ArgumentError, 'invalid value for "location_id", the character length must be smaller than or equal to 10.'
      end

      @location_id = location_id
    end

    # Custom attribute writer method with validation
    # @param [Object] address1 Value to be assigned
    def address1=(address1)
      if !address1.nil? && address1.to_s.length > 13
        fail ArgumentError, 'invalid value for "address1", the character length must be smaller than or equal to 13.'
      end

      @address1 = address1
    end

    # Custom attribute writer method with validation
    # @param [Object] address2 Value to be assigned
    def address2=(address2)
      if !address2.nil? && address2.to_s.length > 13
        fail ArgumentError, 'invalid value for "address2", the character length must be smaller than or equal to 13.'
      end

      @address2 = address2
    end

    # Custom attribute writer method with validation
    # @param [Object] location Value to be assigned
    def location=(location)
      if !location.nil? && location.to_s.length > 38
        fail ArgumentError, 'invalid value for "location", the character length must be smaller than or equal to 38.'
      end

      @location = location
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          city == o.city &&
          state == o.state &&
          country == o.country &&
          location_id == o.location_id &&
          address1 == o.address1 &&
          address2 == o.address2 &&
          location == o.location
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [city, state, country, location_id, address1, address2, location].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = CyberSource.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
