=begin
#CyberSource Merged Spec

#All CyberSource API specs merged together. These are available at https://developer.cybersource.com/api/reference/api-reference.html

OpenAPI spec version: 0.0.1

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.2.3

=end

require 'date'

module CyberSource
  # Contains the result of risk assessment.
  class PtsV2PaymentsPost201ResponseRiskInformation
    attr_accessor :profile

    attr_accessor :rules

    attr_accessor :info_codes

    attr_accessor :velocity

    # You receive this field only if you subscribe to the Enhanced Case Management service. The priority level ranges from 1 (highest) to 5 (lowest); the default value is 3. If you do not assign a priority to your rules or to your profiles, the default value is given to the order.  For all possible values, see the `decision_case_priority` field description in the _Decision Manager Using the SCMP API Developer Guide_ on the [CyberSource Business Center.](https://ebc2.cybersource.com/ebc2/) Click **Decision Manager** > **Documentation** > **Guides** > _Decision Manager Using the SCMP API Developer Guide_ (PDF link). 
    attr_accessor :case_priority

    # The customer's local time (`hh:mm:ss`), which is calculated from the transaction request time and the customer's billing address.  For details, see the `score_time_local` field description in the _Decision Manager Using the SCMP API Developer Guide_ on the [CyberSource Business Center.](https://ebc2.cybersource.com/ebc2/) 
    attr_accessor :local_time

    attr_accessor :score

    attr_accessor :ip_address

    attr_accessor :providers

    attr_accessor :travel

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'profile' => :'profile',
        :'rules' => :'rules',
        :'info_codes' => :'infoCodes',
        :'velocity' => :'velocity',
        :'case_priority' => :'casePriority',
        :'local_time' => :'localTime',
        :'score' => :'score',
        :'ip_address' => :'ipAddress',
        :'providers' => :'providers',
        :'travel' => :'travel'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'profile' => :'PtsV2PaymentsPost201ResponseRiskInformationProfile',
        :'rules' => :'Array<PtsV2PaymentsPost201ResponseRiskInformationRules>',
        :'info_codes' => :'PtsV2PaymentsPost201ResponseRiskInformationInfoCodes',
        :'velocity' => :'PtsV2PaymentsPost201ResponseRiskInformationVelocity',
        :'case_priority' => :'Integer',
        :'local_time' => :'String',
        :'score' => :'PtsV2PaymentsPost201ResponseRiskInformationScore',
        :'ip_address' => :'PtsV2PaymentsPost201ResponseRiskInformationIpAddress',
        :'providers' => :'PtsV2PaymentsPost201ResponseRiskInformationProviders',
        :'travel' => :'PtsV2PaymentsPost201ResponseRiskInformationTravel'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      if attributes.has_key?(:'profile')
        self.profile = attributes[:'profile']
      end

      if attributes.has_key?(:'rules')
        if (value = attributes[:'rules']).is_a?(Array)
          self.rules = value
        end
      end

      if attributes.has_key?(:'infoCodes')
        self.info_codes = attributes[:'infoCodes']
      end

      if attributes.has_key?(:'velocity')
        self.velocity = attributes[:'velocity']
      end

      if attributes.has_key?(:'casePriority')
        self.case_priority = attributes[:'casePriority']
      end

      if attributes.has_key?(:'localTime')
        self.local_time = attributes[:'localTime']
      end

      if attributes.has_key?(:'score')
        self.score = attributes[:'score']
      end

      if attributes.has_key?(:'ipAddress')
        self.ip_address = attributes[:'ipAddress']
      end

      if attributes.has_key?(:'providers')
        self.providers = attributes[:'providers']
      end

      if attributes.has_key?(:'travel')
        self.travel = attributes[:'travel']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if !@local_time.nil? && @local_time.to_s.length > 255
        invalid_properties.push('invalid value for "local_time", the character length must be smaller than or equal to 255.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if !@local_time.nil? && @local_time.to_s.length > 255
      true
    end

    # Custom attribute writer method with validation
    # @param [Object] local_time Value to be assigned
    def local_time=(local_time)
      if !local_time.nil? && local_time.to_s.length > 255
        fail ArgumentError, 'invalid value for "local_time", the character length must be smaller than or equal to 255.'
      end

      @local_time = local_time
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          profile == o.profile &&
          rules == o.rules &&
          info_codes == o.info_codes &&
          velocity == o.velocity &&
          case_priority == o.case_priority &&
          local_time == o.local_time &&
          score == o.score &&
          ip_address == o.ip_address &&
          providers == o.providers &&
          travel == o.travel
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [profile, rules, info_codes, velocity, case_priority, local_time, score, ip_address, providers, travel].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = CyberSource.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
