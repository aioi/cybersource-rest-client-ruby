=begin
#CyberSource Merged Spec

#All CyberSource API specs merged together. These are available at https://developer.cybersource.com/api/reference/api-reference.html

OpenAPI spec version: 0.0.1

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.2.3

=end

require 'date'

module CyberSource
  class Ptsv2paymentsTravelInformationTransitAirlineAncillaryInformation
    # Ticket number, which consists of the carrier code, form, and serial number, without the check digit. **Important** This field is required in the U.S. in order for you to qualify for either the custom payment service (CPS) or the electronic interchange reimbursement fee (EIRF) program. Format: English characters only. Optional field for ancillary services. 
    attr_accessor :ticket_number

    # Name of the passenger. If the passenger’s name is not available, this value is the cardholder’s name. If neither the passenger’s name nor the cardholder’s name is available, this value is a description of the ancillary purchase. **Important** This field is required in the U.S. in order for you to qualify for either the custom payment service (CPS) or the electronic interchange reimbursement fee (EIRF) program. Format: English characters only. Optional field for ancillary service. 
    attr_accessor :passenger_name

    # Number for the airline ticket to which the ancillary purchase is connected.  If this purchase has a connection or relationship to another purchase such as a baggage fee for a passenger transport ticket, this field must contain the ticket number for the other purchase.  For a stand-alone purchase, the value for this field must be the same as the value for the `travelInformation.transit.airline.ancillaryInformation.ticketNumber` field. **Important** This field is required in the U.S. in order for you to qualify for either the custom payment service (CPS) or the electronic interchange reimbursement fee (EIRF) program. Format: English characters only. Optional request field for ancillary services. 
    attr_accessor :connected_ticket_number

    # Reason for the credit. Possible values: - `A`: Cancellation of the ancillary passenger transport purchase. - `B`: Cancellation of the airline ticket and the passenger transport ancillary purchase. - `C`: Cancellation of the airline ticket. - `O`: Other. - `P`: Partial refund of the airline ticket. Format: English characters only. Optional field for ancillary services. 
    attr_accessor :credit_reason_indicator

    attr_accessor :service

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'ticket_number' => :'ticketNumber',
        :'passenger_name' => :'passengerName',
        :'connected_ticket_number' => :'connectedTicketNumber',
        :'credit_reason_indicator' => :'creditReasonIndicator',
        :'service' => :'service'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'ticket_number' => :'String',
        :'passenger_name' => :'String',
        :'connected_ticket_number' => :'String',
        :'credit_reason_indicator' => :'String',
        :'service' => :'Array<Ptsv2paymentsTravelInformationTransitAirlineAncillaryInformationService>'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      if attributes.has_key?(:'ticketNumber')
        self.ticket_number = attributes[:'ticketNumber']
      end

      if attributes.has_key?(:'passengerName')
        self.passenger_name = attributes[:'passengerName']
      end

      if attributes.has_key?(:'connectedTicketNumber')
        self.connected_ticket_number = attributes[:'connectedTicketNumber']
      end

      if attributes.has_key?(:'creditReasonIndicator')
        self.credit_reason_indicator = attributes[:'creditReasonIndicator']
      end

      if attributes.has_key?(:'service')
        if (value = attributes[:'service']).is_a?(Array)
          self.service = value
        end
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if !@ticket_number.nil? && @ticket_number.to_s.length > 15
        invalid_properties.push('invalid value for "ticket_number", the character length must be smaller than or equal to 15.')
      end

      if !@passenger_name.nil? && @passenger_name.to_s.length > 20
        invalid_properties.push('invalid value for "passenger_name", the character length must be smaller than or equal to 20.')
      end

      if !@connected_ticket_number.nil? && @connected_ticket_number.to_s.length > 15
        invalid_properties.push('invalid value for "connected_ticket_number", the character length must be smaller than or equal to 15.')
      end

      if !@credit_reason_indicator.nil? && @credit_reason_indicator.to_s.length > 15
        invalid_properties.push('invalid value for "credit_reason_indicator", the character length must be smaller than or equal to 15.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if !@ticket_number.nil? && @ticket_number.to_s.length > 15
      return false if !@passenger_name.nil? && @passenger_name.to_s.length > 20
      return false if !@connected_ticket_number.nil? && @connected_ticket_number.to_s.length > 15
      return false if !@credit_reason_indicator.nil? && @credit_reason_indicator.to_s.length > 15
      true
    end

    # Custom attribute writer method with validation
    # @param [Object] ticket_number Value to be assigned
    def ticket_number=(ticket_number)
      if !ticket_number.nil? && ticket_number.to_s.length > 15
        fail ArgumentError, 'invalid value for "ticket_number", the character length must be smaller than or equal to 15.'
      end

      @ticket_number = ticket_number
    end

    # Custom attribute writer method with validation
    # @param [Object] passenger_name Value to be assigned
    def passenger_name=(passenger_name)
      if !passenger_name.nil? && passenger_name.to_s.length > 20
        fail ArgumentError, 'invalid value for "passenger_name", the character length must be smaller than or equal to 20.'
      end

      @passenger_name = passenger_name
    end

    # Custom attribute writer method with validation
    # @param [Object] connected_ticket_number Value to be assigned
    def connected_ticket_number=(connected_ticket_number)
      if !connected_ticket_number.nil? && connected_ticket_number.to_s.length > 15
        fail ArgumentError, 'invalid value for "connected_ticket_number", the character length must be smaller than or equal to 15.'
      end

      @connected_ticket_number = connected_ticket_number
    end

    # Custom attribute writer method with validation
    # @param [Object] credit_reason_indicator Value to be assigned
    def credit_reason_indicator=(credit_reason_indicator)
      if !credit_reason_indicator.nil? && credit_reason_indicator.to_s.length > 15
        fail ArgumentError, 'invalid value for "credit_reason_indicator", the character length must be smaller than or equal to 15.'
      end

      @credit_reason_indicator = credit_reason_indicator
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          ticket_number == o.ticket_number &&
          passenger_name == o.passenger_name &&
          connected_ticket_number == o.connected_ticket_number &&
          credit_reason_indicator == o.credit_reason_indicator &&
          service == o.service
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [ticket_number, passenger_name, connected_ticket_number, credit_reason_indicator, service].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = CyberSource.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
