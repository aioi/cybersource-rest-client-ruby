=begin
#CyberSource Merged Spec

#All CyberSource API specs merged together. These are available at https://developer.cybersource.com/api/reference/api-reference.html

OpenAPI spec version: 0.0.1

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.2.3

=end

require 'spec_helper'
require 'json'

# Unit tests for CyberSource::InvoicesApi
# Automatically generated by swagger-codegen (github.com/swagger-api/swagger-codegen)
# Please update as you see appropriate
describe 'InvoicesApi' do
  before do
    # run before each test
    @instance = CyberSource::InvoicesApi.new
  end

  after do
    # run after each test
  end

  describe 'test an instance of InvoicesApi' do
    it 'should create an instance of InvoicesApi' do
      expect(@instance).to be_instance_of(CyberSource::InvoicesApi)
    end
  end

  # unit tests for create_invoice
  # Create a New Invoice
  # Create a new invoice.
  # @param create_invoice_request 
  # @param [Hash] opts the optional parameters
  # @return [InvoicingV2InvoicesPost201Response]
  describe 'create_invoice test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_all_invoices
  # Get a List of Invoices
  # Get a list of invoices.
  # @param offset Page offset number.
  # @param limit Maximum number of items you would like returned.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :status The status of the invoice.  Possible values:   - DRAFT   - CREATED   - SENT   - PARTIAL   - PAID   - CANCELED 
  # @return [InvoicingV2InvoicesAllGet200Response]
  describe 'get_all_invoices test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_invoice
  # Get Invoice Details
  # Get the details of a specific invoice.
  # @param id The invoice number.
  # @param [Hash] opts the optional parameters
  # @return [InvoicingV2InvoicesGet200Response]
  describe 'get_invoice test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for perform_cancel_action
  # Cancel an Invoice
  # Cancel an invoice.
  # @param id The invoice number.
  # @param [Hash] opts the optional parameters
  # @return [InvoicingV2InvoicesPost201Response]
  describe 'perform_cancel_action test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for perform_send_action
  # Send an Invoice
  # Send an invoice.
  # @param id The invoice number.
  # @param [Hash] opts the optional parameters
  # @return [InvoicingV2InvoicesPost201Response]
  describe 'perform_send_action test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for update_invoice
  # Update an Invoice
  # Update an invoice.
  # @param id The invoice number.
  # @param update_invoice_request Updating the invoice does not resend the invoice automatically. You must resend the invoice separately.
  # @param [Hash] opts the optional parameters
  # @return [InvoicingV2InvoicesPost201Response]
  describe 'update_invoice test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

end
