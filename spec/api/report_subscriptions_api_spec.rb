=begin
#CyberSource Merged Spec

#All CyberSource API specs merged together. These are available at https://developer.cybersource.com/api/reference/api-reference.html

OpenAPI spec version: 0.0.1

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.2.3

=end

require 'spec_helper'
require 'json'

# Unit tests for CyberSource::ReportSubscriptionsApi
# Automatically generated by swagger-codegen (github.com/swagger-api/swagger-codegen)
# Please update as you see appropriate
describe 'ReportSubscriptionsApi' do
  before do
    # run before each test
    @instance = CyberSource::ReportSubscriptionsApi.new
  end

  after do
    # run after each test
  end

  describe 'test an instance of ReportSubscriptionsApi' do
    it 'should create an instance of ReportSubscriptionsApi' do
      expect(@instance).to be_instance_of(CyberSource::ReportSubscriptionsApi)
    end
  end

  # unit tests for create_standard_or_classic_subscription
  # Create a Standard or Classic Subscription
  # Create or update an already existing classic or standard subscription. 
  # @param predefined_subscription_request_bean Report subscription request payload
  # @param [Hash] opts the optional parameters
  # @option opts [String] :organization_id Valid Cybersource Organization Id
  # @return [nil]
  describe 'create_standard_or_classic_subscription test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for create_subscription
  # Create Report Subscription for a Report Name by Organization
  # Create a report subscription for your organization. The report name must be unique. 
  # @param create_report_subscription_request Report subscription request payload
  # @param [Hash] opts the optional parameters
  # @option opts [String] :organization_id Valid Cybersource Organization Id
  # @return [nil]
  describe 'create_subscription test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for delete_subscription
  # Delete Subscription of a Report Name by Organization
  # Delete a report subscription for your organization. You must know the unique name of the report you want to delete. 
  # @param report_name Name of the Report to Delete
  # @param [Hash] opts the optional parameters
  # @option opts [String] :organization_id Valid Cybersource Organization Id
  # @return [nil]
  describe 'delete_subscription test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_all_subscriptions
  # Get All Subscriptions
  # View a summary of all report subscriptions. 
  # @param [Hash] opts the optional parameters
  # @option opts [String] :organization_id Valid Cybersource Organization Id
  # @return [ReportingV3ReportSubscriptionsGet200Response]
  describe 'get_all_subscriptions test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_subscription
  # Get Subscription for Report Name
  # View the details of a report subscription, such as the report format or report frequency, using the reportâ€™s unique name. 
  # @param report_name Name of the Report to Retrieve
  # @param [Hash] opts the optional parameters
  # @option opts [String] :organization_id Valid Cybersource Organization Id
  # @return [ReportingV3ReportSubscriptionsGet200ResponseSubscriptions]
  describe 'get_subscription test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

end
